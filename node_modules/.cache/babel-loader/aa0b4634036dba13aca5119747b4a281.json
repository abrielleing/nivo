{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = _interopDefault(require('react'));\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar pure = _interopDefault(require('recompose/pure'));\n\nvar core = require('@nivo/core');\n\nvar isFunction = _interopDefault(require('lodash/isFunction'));\n\nvar d3Format = require('d3-format');\n\nvar compose = _interopDefault(require('recompose/compose'));\n\nvar withState = _interopDefault(require('recompose/withState'));\n\nvar withHandlers = _interopDefault(require('recompose/withHandlers'));\n\nvar withPropsOnChange = _interopDefault(require('recompose/withPropsOnChange'));\n\nvar reactMotion = require('react-motion');\n\nvar scales = require('@nivo/scales');\n\nvar legends = require('@nivo/legends');\n\nvar d3Shape = require('d3-shape');\n\nvar defaultProps = _interopDefault(require('recompose/defaultProps'));\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar LineAreas = function LineAreas(_ref) {\n  var areaGenerator = _ref.areaGenerator,\n      areaOpacity = _ref.areaOpacity,\n      lines = _ref.lines,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n\n  if (animate !== true) {\n    return React.createElement('g', null, lines.slice(0).reverse().map(function (_ref2) {\n      var id = _ref2.id,\n          data = _ref2.data,\n          areaColor = _ref2.color;\n      return React.createElement('path', {\n        key: id,\n        d: areaGenerator(data.map(function (d) {\n          return d.position;\n        })),\n        fill: areaColor,\n        fillOpacity: areaOpacity,\n        strokeWidth: 0\n      });\n    }));\n  }\n\n  var springConfig = {\n    stiffness: motionStiffness,\n    damping: motionDamping\n  };\n  return React.createElement('g', null, lines.slice(0).reverse().map(function (_ref3) {\n    var id = _ref3.id,\n        data = _ref3.data,\n        areaColor = _ref3.color;\n    return React.createElement(core.SmartMotion, {\n      key: id,\n      style: function style(spring) {\n        return {\n          d: spring(areaGenerator(data.map(function (d) {\n            return d.position;\n          })), springConfig),\n          fill: spring(areaColor, springConfig)\n        };\n      }\n    }, function (style) {\n      return React.createElement('path', {\n        key: id,\n        d: style.d,\n        fill: areaColor,\n        fillOpacity: areaOpacity,\n        strokeWidth: 0\n      });\n    });\n  }));\n};\n\nLineAreas.propTypes = _extends({\n  areaOpacity: PropTypes.number.isRequired\n}, core.motionPropTypes);\nvar LineAreas$1 = pure(LineAreas);\n\nvar LineLine = function LineLine(_ref) {\n  var lineGenerator = _ref.lineGenerator,\n      id = _ref.id,\n      points = _ref.points,\n      color = _ref.color,\n      thickness = _ref.thickness,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n\n  if (animate !== true) {\n    return React.createElement('path', {\n      key: id,\n      d: lineGenerator(points),\n      fill: 'none',\n      strokeWidth: thickness,\n      stroke: color\n    });\n  }\n\n  var springConfig = {\n    stiffness: motionStiffness,\n    damping: motionDamping\n  };\n  return React.createElement(core.SmartMotion, {\n    key: id,\n    style: function style(spring) {\n      return {\n        d: spring(lineGenerator(points), springConfig),\n        stroke: spring(color, springConfig)\n      };\n    }\n  }, function (style) {\n    return React.createElement('path', {\n      key: id,\n      d: style.d,\n      fill: 'none',\n      strokeWidth: thickness,\n      stroke: style.stroke\n    });\n  });\n};\n\nLineLine.propTypes = _extends({\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  points: PropTypes.arrayOf(PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  })),\n  lineGenerator: PropTypes.func.isRequired,\n  color: PropTypes.string.isRequired,\n  thickness: PropTypes.number.isRequired\n}, core.motionPropTypes);\nvar Line = pure(LineLine);\n\nvar LineLines = function LineLines(_ref) {\n  var lines = _ref.lines,\n      lineGenerator = _ref.lineGenerator,\n      lineWidth = _ref.lineWidth,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n  return React.createElement('g', null, lines.map(function (_ref2) {\n    var id = _ref2.id,\n        data = _ref2.data,\n        color = _ref2.color;\n    return React.createElement(Line, {\n      key: id,\n      id: id,\n      points: data.map(function (d) {\n        return d.position;\n      }),\n      lineGenerator: lineGenerator,\n      color: color,\n      thickness: lineWidth,\n      animate: animate,\n      motionStiffness: motionStiffness,\n      motionDamping: motionDamping\n    });\n  }));\n};\n\nLineLines.propTypes = _extends({\n  lines: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    color: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      data: PropTypes.shape({\n        x: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]),\n        y: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)])\n      }).isRequired,\n      position: PropTypes.shape({\n        x: PropTypes.number,\n        y: PropTypes.number\n      }).isRequired\n    })).isRequired\n  })).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  lineGenerator: PropTypes.func.isRequired\n}, core.motionPropTypes);\nvar LineLines$1 = pure(LineLines);\n\nvar Chip = function Chip(_ref) {\n  var color = _ref.color;\n  return React.createElement('span', {\n    style: {\n      display: 'block',\n      width: '12px',\n      height: '12px',\n      background: color\n    }\n  });\n};\n\nChip.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nvar LineSlicesItem = function LineSlicesItem(_ref2) {\n  var slice = _ref2.slice,\n      height = _ref2.height,\n      showTooltip = _ref2.showTooltip,\n      hideTooltip = _ref2.hideTooltip,\n      isHover = _ref2.isHover;\n  return React.createElement('g', {\n    transform: 'translate(' + slice.x + ', 0)'\n  }, isHover && React.createElement('line', {\n    x1: 0,\n    x2: 0,\n    y1: 0,\n    y2: height,\n    stroke: '#000',\n    strokeOpacity: 0.35,\n    strokeWidth: 1\n  }), React.createElement('rect', {\n    x: -20,\n    width: 40,\n    height: height,\n    fill: '#F00',\n    fillOpacity: 0,\n    onMouseEnter: showTooltip,\n    onMouseMove: showTooltip,\n    onMouseLeave: hideTooltip\n  }));\n};\n\nLineSlicesItem.propTypes = {\n  slice: PropTypes.object.isRequired,\n  height: PropTypes.number.isRequired,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  isHover: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  tooltip: PropTypes.func,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nvar enhance = compose(withState('isHover', 'setIsHover', false), withPropsOnChange(['slice', 'theme', 'tooltip', 'tooltipFormat'], function (_ref3) {\n  var slice = _ref3.slice,\n      theme = _ref3.theme,\n      tooltip = _ref3.tooltip,\n      tooltipFormat = _ref3.tooltipFormat;\n  var format = !tooltipFormat || isFunction(tooltipFormat) ? tooltipFormat : d3Format.format(tooltipFormat);\n  var hasValues = slice.data.some(function (d) {\n    return d.position.x !== null && d.position.y !== null;\n  });\n  return {\n    tooltipElement: hasValues ? React.createElement(core.TableTooltip, {\n      theme: theme,\n      rows: slice.data.filter(function (d) {\n        return d.position.x !== null && d.position.y !== null;\n      }).map(function (d) {\n        return [React.createElement(Chip, {\n          key: d.id,\n          color: d.serie.color\n        }), d.serie.id, format ? format(d.data.y) : d.data.y];\n      }),\n      format: format,\n      renderContent: typeof tooltip === 'function' ? tooltip.bind(null, _extends({}, slice)) : null\n    }) : null\n  };\n}), withHandlers({\n  showTooltip: function showTooltip(_ref4) {\n    var _showTooltip = _ref4.showTooltip,\n        setIsHover = _ref4.setIsHover,\n        tooltipElement = _ref4.tooltipElement;\n    return function (e) {\n      setIsHover(true);\n\n      _showTooltip(tooltipElement, e);\n    };\n  },\n  hideTooltip: function hideTooltip(_ref5) {\n    var _hideTooltip = _ref5.hideTooltip,\n        setIsHover = _ref5.setIsHover;\n    return function () {\n      setIsHover(false);\n\n      _hideTooltip();\n    };\n  }\n}), pure);\nvar LineSlicesItem$1 = enhance(LineSlicesItem);\n\nvar LineSlices = function LineSlices(_ref) {\n  var slices = _ref.slices,\n      height = _ref.height,\n      showTooltip = _ref.showTooltip,\n      hideTooltip = _ref.hideTooltip,\n      theme = _ref.theme,\n      tooltip = _ref.tooltip,\n      tooltipFormat = _ref.tooltipFormat;\n  return React.createElement('g', null, slices.map(function (slice) {\n    return React.createElement(LineSlicesItem$1, {\n      key: slice.id,\n      slice: slice,\n      height: height,\n      showTooltip: showTooltip,\n      hideTooltip: hideTooltip,\n      theme: theme,\n      tooltipFormat: tooltipFormat,\n      tooltip: tooltip\n    });\n  }));\n};\n\nLineSlices.propTypes = {\n  slices: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    x: PropTypes.number.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      data: PropTypes.shape({\n        x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n        y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n      }),\n      position: PropTypes.shape({\n        x: PropTypes.number,\n        y: PropTypes.number\n      }).isRequired,\n      serie: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n        color: PropTypes.string.isRequired\n      }).isRequired\n    })).isRequired\n  })).isRequired,\n  height: PropTypes.number.isRequired,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  theme: PropTypes.object.isRequired,\n  tooltip: PropTypes.func,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nvar LineSlices$1 = pure(LineSlices);\n\nvar LineDots = function LineDots(_ref) {\n  var lines = _ref.lines,\n      symbol = _ref.symbol,\n      size = _ref.size,\n      color = _ref.color,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelFormat = _ref.labelFormat,\n      labelYOffset = _ref.labelYOffset,\n      theme = _ref.theme,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n  var getLabel = core.getLabelGenerator(label, labelFormat);\n  var points = lines.reduce(function (acc, line) {\n    var id = line.id,\n        data = line.data;\n    return [].concat(acc, data.filter(function (datum) {\n      return datum.position.x !== null && datum.position.y !== null;\n    }).map(function (datum) {\n      return {\n        key: id + '.' + datum.data.x,\n        x: datum.position.x,\n        y: datum.position.y,\n        fill: color(line),\n        stroke: borderColor(line),\n        label: enableLabel ? getLabel(datum.data) : null\n      };\n    }));\n  }, []);\n\n  if (animate !== true) {\n    return React.createElement('g', null, points.map(function (point) {\n      return React.createElement(core.DotsItem, {\n        key: point.key,\n        x: point.x,\n        y: point.y,\n        symbol: symbol,\n        size: size,\n        color: point.fill,\n        borderWidth: borderWidth,\n        borderColor: point.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        theme: theme\n      });\n    }));\n  }\n\n  var springConfig = {\n    motionDamping: motionDamping,\n    motionStiffness: motionStiffness\n  };\n  return React.createElement(reactMotion.TransitionMotion, {\n    styles: points.map(function (point) {\n      return {\n        key: point.key,\n        data: point,\n        style: {\n          x: reactMotion.spring(point.x, springConfig),\n          y: reactMotion.spring(point.y, springConfig),\n          size: reactMotion.spring(size, springConfig)\n        }\n      };\n    })\n  }, function (interpolatedStyles) {\n    return React.createElement('g', null, interpolatedStyles.map(function (_ref2) {\n      var key = _ref2.key,\n          style = _ref2.style,\n          point = _ref2.data;\n      return React.createElement(core.DotsItem, _extends({\n        key: key\n      }, style, {\n        symbol: symbol,\n        color: point.fill,\n        borderWidth: borderWidth,\n        borderColor: point.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        theme: theme\n      }));\n    }));\n  });\n};\n\nLineDots.propTypes = _extends({\n  lines: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })),\n  symbol: PropTypes.func,\n  size: PropTypes.number.isRequired,\n  color: PropTypes.func.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.func.isRequired,\n  enableLabel: PropTypes.bool.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  labelFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  labelYOffset: PropTypes.number,\n  theme: PropTypes.shape({\n    dots: core.dotsThemePropType.isRequired\n  }).isRequired\n}, core.motionPropTypes);\nLineDots.defaultProps = {\n  // labels\n  enableLabel: false,\n  label: 'y'\n};\nvar LinePropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n      y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n    })).isRequired\n  })).isRequired,\n  xScale: scales.scalePropType.isRequired,\n  yScale: scales.scalePropType.isRequired,\n  computedData: PropTypes.object.isRequired,\n  curve: core.lineCurvePropType.isRequired,\n  areaGenerator: PropTypes.func.isRequired,\n  lineGenerator: PropTypes.func.isRequired,\n  axisTop: PropTypes.object,\n  axisRight: PropTypes.object,\n  axisBottom: PropTypes.object,\n  axisLeft: PropTypes.object,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  gridXValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  gridYValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  enableDots: PropTypes.bool.isRequired,\n  dotSymbol: PropTypes.func,\n  dotSize: PropTypes.number.isRequired,\n  dotColor: PropTypes.any.isRequired,\n  dotBorderWidth: PropTypes.number.isRequired,\n  dotBorderColor: PropTypes.any.isRequired,\n  enableDotLabel: PropTypes.bool.isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    style: PropTypes.object\n  })),\n  getColor: PropTypes.func.isRequired,\n  enableArea: PropTypes.bool.isRequired,\n  areaOpacity: PropTypes.number.isRequired,\n  areaBaselineValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  enableStackTooltip: PropTypes.bool.isRequired,\n  tooltip: PropTypes.func,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  legends: PropTypes.arrayOf(PropTypes.shape(legends.LegendPropShape)).isRequired\n};\nvar LineDefaultProps = {\n  stacked: false,\n  curve: 'linear',\n  xScale: {\n    type: 'point'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: true,\n  enableGridY: true,\n  enableDots: true,\n  dotSize: 6,\n  dotColor: 'inherit',\n  dotBorderWidth: 0,\n  dotBorderColor: 'inherit',\n  enableDotLabel: false,\n  colors: 'nivo',\n  colorBy: 'id',\n  enableArea: false,\n  areaBaselineValue: 0,\n  areaOpacity: 0.2,\n  lineWidth: 2,\n  defs: [],\n  isInteractive: true,\n  enableStackTooltip: true,\n  legends: []\n};\n\nvar Line$1 = function Line(_ref) {\n  var computedData = _ref.computedData,\n      lineGenerator = _ref.lineGenerator,\n      areaGenerator = _ref.areaGenerator,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      outerWidth = _ref.outerWidth,\n      outerHeight = _ref.outerHeight,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      axisBottom = _ref.axisBottom,\n      axisLeft = _ref.axisLeft,\n      enableGridX = _ref.enableGridX,\n      enableGridY = _ref.enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      lineWidth = _ref.lineWidth,\n      enableArea = _ref.enableArea,\n      areaOpacity = _ref.areaOpacity,\n      enableDots = _ref.enableDots,\n      dotSymbol = _ref.dotSymbol,\n      dotSize = _ref.dotSize,\n      dotColor = _ref.dotColor,\n      dotBorderWidth = _ref.dotBorderWidth,\n      dotBorderColor = _ref.dotBorderColor,\n      enableDotLabel = _ref.enableDotLabel,\n      dotLabel = _ref.dotLabel,\n      dotLabelFormat = _ref.dotLabelFormat,\n      dotLabelYOffset = _ref.dotLabelYOffset,\n      markers = _ref.markers,\n      theme = _ref.theme,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping,\n      isInteractive = _ref.isInteractive,\n      tooltipFormat = _ref.tooltipFormat,\n      tooltip = _ref.tooltip,\n      enableStackTooltip = _ref.enableStackTooltip,\n      legends$$1 = _ref.legends;\n  var motionProps = {\n    animate: animate,\n    motionDamping: motionDamping,\n    motionStiffness: motionStiffness\n  };\n  return React.createElement(core.Container, {\n    isInteractive: isInteractive,\n    theme: theme\n  }, function (_ref2) {\n    var showTooltip = _ref2.showTooltip,\n        hideTooltip = _ref2.hideTooltip;\n    return React.createElement(core.SvgWrapper, {\n      width: outerWidth,\n      height: outerHeight,\n      margin: margin,\n      theme: theme\n    }, React.createElement(core.Grid, _extends({\n      theme: theme,\n      width: width,\n      height: height,\n      xScale: enableGridX ? computedData.xScale : null,\n      yScale: enableGridY ? computedData.yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }, motionProps)), React.createElement(core.CartesianMarkers, {\n      markers: markers,\n      width: width,\n      height: height,\n      xScale: computedData.xScale,\n      yScale: computedData.yScale,\n      theme: theme\n    }), React.createElement(core.Axes, _extends({\n      xScale: computedData.xScale,\n      yScale: computedData.yScale,\n      width: width,\n      height: height,\n      theme: theme,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, motionProps)), enableArea && React.createElement(LineAreas$1, _extends({\n      areaGenerator: areaGenerator,\n      areaOpacity: areaOpacity,\n      lines: computedData.series\n    }, motionProps)), React.createElement(LineLines$1, _extends({\n      lines: computedData.series,\n      lineGenerator: lineGenerator,\n      lineWidth: lineWidth\n    }, motionProps)), isInteractive && enableStackTooltip && React.createElement(LineSlices$1, {\n      slices: computedData.slices,\n      height: height,\n      showTooltip: showTooltip,\n      hideTooltip: hideTooltip,\n      theme: theme,\n      tooltipFormat: tooltipFormat,\n      tooltip: tooltip\n    }), enableDots && React.createElement(LineDots, _extends({\n      lines: computedData.series,\n      symbol: dotSymbol,\n      size: dotSize,\n      color: core.getInheritedColorGenerator(dotColor),\n      borderWidth: dotBorderWidth,\n      borderColor: core.getInheritedColorGenerator(dotBorderColor),\n      enableLabel: enableDotLabel,\n      label: dotLabel,\n      labelFormat: dotLabelFormat,\n      labelYOffset: dotLabelYOffset,\n      theme: theme\n    }, motionProps)), legends$$1.map(function (legend, i) {\n      var legendData = computedData.series.map(function (line) {\n        return {\n          id: line.id,\n          label: line.id,\n          color: line.color\n        };\n      }).reverse();\n      return React.createElement(legends.BoxLegendSvg, _extends({\n        key: i\n      }, legend, {\n        containerWidth: width,\n        containerHeight: height,\n        data: legendData,\n        theme: theme\n      }));\n    }));\n  });\n};\n\nLine$1.propTypes = LinePropTypes;\nvar enhance$1 = compose(defaultProps(LineDefaultProps), core.withTheme(), core.withColors(), core.withDimensions(), core.withMotion(), withPropsOnChange(['curve'], function (_ref3) {\n  var curve = _ref3.curve;\n  return {\n    lineGenerator: d3Shape.line().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).curve(core.curveFromProp(curve))\n  };\n}), withPropsOnChange(['data', 'xScale', 'yScale', 'width', 'height'], function (_ref4) {\n  var data = _ref4.data,\n      xScale = _ref4.xScale,\n      yScale = _ref4.yScale,\n      width = _ref4.width,\n      height = _ref4.height;\n  return {\n    computedData: scales.computeXYScalesForSeries(data, xScale, yScale, width, height)\n  };\n}), withPropsOnChange(['getColor', 'computedData'], function (_ref5) {\n  var getColor = _ref5.getColor,\n      _computedData = _ref5.computedData;\n\n  var computedData = _extends({}, _computedData, {\n    series: _computedData.series.map(function (serie) {\n      return _extends({}, serie, {\n        color: getColor(serie)\n      });\n    })\n  });\n\n  computedData.slices = scales.computeYSlices(computedData);\n  return {\n    computedData: computedData\n  };\n}), withPropsOnChange(['curve', 'computedData', 'areaBaselineValue'], function (_ref6) {\n  var curve = _ref6.curve,\n      computedData = _ref6.computedData,\n      areaBaselineValue = _ref6.areaBaselineValue;\n  return {\n    areaGenerator: d3Shape.area().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y1(function (d) {\n      return d.y;\n    }).curve(core.curveFromProp(curve)).y0(computedData.yScale(areaBaselineValue))\n  };\n}), pure);\nvar enhancedLine = enhance$1(Line$1);\nenhancedLine.displayName = 'Line';\n\nvar ResponsiveLine = function ResponsiveLine(props) {\n  return React.createElement(core.ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(enhancedLine, _extends({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexports.Line = enhancedLine;\nexports.ResponsiveLine = ResponsiveLine;\nexports.LinePropTypes = LinePropTypes;\nexports.LineDefaultProps = LineDefaultProps;","map":null,"metadata":{},"sourceType":"script"}