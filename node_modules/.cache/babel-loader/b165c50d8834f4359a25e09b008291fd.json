{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar Measure = _interopDefault(require('react-measure'));\n\nvar pure = _interopDefault(require('recompose/pure'));\n\nvar reactMotion = require('react-motion');\n\nvar d3Interpolate = require('d3-interpolate');\n\nvar isFunction = _interopDefault(require('lodash/isFunction'));\n\nvar d3Format = require('d3-format');\n\nvar compose = _interopDefault(require('recompose/compose'));\n\nvar withPropsOnChange = _interopDefault(require('recompose/withPropsOnChange'));\n\nvar memoize = _interopDefault(require('lodash/memoize'));\n\nvar get = _interopDefault(require('lodash/get'));\n\nvar d3Color = require('d3-color');\n\nvar last = _interopDefault(require('lodash/last'));\n\nvar isArray = _interopDefault(require('lodash/isArray'));\n\nvar d3Scale = require('d3-scale');\n\nvar d3ScaleChromatic = require('d3-scale-chromatic');\n\nvar isString = _interopDefault(require('lodash/isString'));\n\nvar setPropTypes = _interopDefault(require('recompose/setPropTypes'));\n\nvar defaultProps = _interopDefault(require('recompose/defaultProps'));\n\nvar without = _interopDefault(require('lodash/without'));\n\nvar d3Shape = require('d3-shape');\n\nvar d3Hierarchy = require('d3-hierarchy');\n\nvar withProps = _interopDefault(require('recompose/withProps'));\n\nvar isEqual = _interopDefault(require('lodash/isEqual'));\n\nvar partialRight = _interopDefault(require('lodash/partialRight'));\n\nvar merge = _interopDefault(require('lodash/merge'));\n\nvar isNumber = _interopDefault(require('lodash/isNumber'));\n\nvar d3TimeFormat = require('d3-time-format');\n\nvar shouldUpdate = _interopDefault(require('recompose/shouldUpdate'));\n\nvar isPlainObject = _interopDefault(require('lodash/isPlainObject'));\n\nvar pick = _interopDefault(require('lodash/pick'));\n\nvar set = _interopDefault(require('lodash/set'));\n\nvar noop = function noop() {};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar containerStyle = {\n  position: 'relative'\n};\nvar tooltipStyle = {\n  pointerEvents: 'none',\n  position: 'absolute',\n  zIndex: 10\n};\nvar noopHandlers = {\n  showTooltip: noop,\n  hideTooltip: noop\n};\n\nvar Container = function (_Component) {\n  inherits(Container, _Component);\n\n  function Container() {\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      isTooltipVisible: false,\n      tooltipContent: null,\n      position: {}\n    }, _this.showTooltip = function (content, event) {\n      var clientX = event.clientX,\n          clientY = event.clientY;\n\n      var bounds = _this.container.getBoundingClientRect();\n\n      var x = clientX - bounds.left;\n      var y = clientY - bounds.top;\n      var position = {};\n      if (x < bounds.width / 2) position.left = x + 20;else position.right = bounds.width - x + 20;\n      if (y < bounds.height / 2) position.top = y - 12;else position.bottom = bounds.height - y - 12;\n\n      _this.setState({\n        isTooltipVisible: true,\n        tooltipContent: content,\n        position: position\n      });\n    }, _this.hideTooltip = function () {\n      _this.setState({\n        isTooltipVisible: false,\n        tooltipContent: null\n      });\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  Container.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        children = _props.children,\n        isInteractive = _props.isInteractive,\n        theme = _props.theme;\n    var _state = this.state,\n        isTooltipVisible = _state.isTooltipVisible,\n        tooltipContent = _state.tooltipContent,\n        position = _state.position;\n    if (!isInteractive) return children(noopHandlers);\n    return React__default.createElement('div', {\n      style: containerStyle,\n      ref: function ref(container) {\n        _this2.container = container;\n      }\n    }, children({\n      showTooltip: this.showTooltip,\n      hideTooltip: this.hideTooltip\n    }), isTooltipVisible && React__default.createElement('div', {\n      style: _extends({}, tooltipStyle, position, theme.tooltip)\n    }, tooltipContent));\n  };\n\n  return Container;\n}(React.Component);\n\nContainer.propTypes = {\n  children: PropTypes.func.isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired\n};\nContainer.defaultProps = {\n  isInteractive: true\n};\n\nvar ResponsiveWrapper = function (_Component) {\n  inherits(ResponsiveWrapper, _Component);\n\n  function ResponsiveWrapper() {\n    var _temp, _this, _ret;\n\n    classCallCheck(this, ResponsiveWrapper);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      dimensions: {\n        width: -1,\n        height: -1\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  ResponsiveWrapper.prototype.render = function render() {\n    var _this2 = this;\n\n    var _state$dimensions = this.state.dimensions,\n        width = _state$dimensions.width,\n        height = _state$dimensions.height;\n    var shouldRender = width > 0 && height > 0;\n    return React__default.createElement(Measure, {\n      bounds: true,\n      onResize: function onResize(contentRect) {\n        _this2.setState({\n          dimensions: contentRect.bounds\n        });\n      }\n    }, function (_ref) {\n      var measureRef = _ref.measureRef;\n      return React__default.createElement('div', {\n        ref: measureRef,\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, shouldRender && _this2.props.children({\n        width: width,\n        height: height\n      }));\n    });\n  };\n\n  return ResponsiveWrapper;\n}(React.Component);\n\nResponsiveWrapper.propTypes = {\n  children: PropTypes.func.isRequired\n};\n\nvar LinearGradient = function LinearGradient(_ref) {\n  var id = _ref.id,\n      colors = _ref.colors;\n  return React__default.createElement('linearGradient', {\n    id: id,\n    x1: 0,\n    x2: 0,\n    y1: 0,\n    y2: 1\n  }, colors.map(function (_ref2) {\n    var offset = _ref2.offset,\n        color = _ref2.color,\n        opacity = _ref2.opacity;\n    return React__default.createElement('stop', {\n      key: offset,\n      offset: offset + '%',\n      stopColor: color,\n      stopOpacity: opacity !== undefined ? opacity : 1\n    });\n  }));\n};\n\nLinearGradient.propTypes = {\n  id: PropTypes.string.isRequired,\n  colors: PropTypes.arrayOf(PropTypes.shape({\n    offset: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired\n  })).isRequired\n};\n\nvar linearGradientDef = function linearGradientDef(id, colors) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _extends({\n    id: id,\n    type: 'linearGradient',\n    colors: colors\n  }, options);\n};\n\nvar gradientTypes = {\n  linearGradient: LinearGradient\n};\nvar PatternDots = pure(function (_ref) {\n  var id = _ref.id,\n      background = _ref.background,\n      color = _ref.color,\n      size = _ref.size,\n      padding = _ref.padding,\n      stagger = _ref.stagger;\n  var fullSize = size + padding;\n  var radius = size / 2;\n  var halfPadding = padding / 2;\n\n  if (stagger === true) {\n    fullSize = size * 2 + padding * 2;\n  }\n\n  return React__default.createElement('pattern', {\n    id: id,\n    width: fullSize,\n    height: fullSize,\n    patternUnits: 'userSpaceOnUse'\n  }, React__default.createElement('rect', {\n    width: fullSize,\n    height: fullSize,\n    fill: background\n  }), React__default.createElement('circle', {\n    cx: halfPadding + radius,\n    cy: halfPadding + radius,\n    r: radius,\n    fill: color\n  }), stagger && React__default.createElement('circle', {\n    cx: padding * 1.5 + size + radius,\n    cy: padding * 1.5 + size + radius,\n    r: radius,\n    fill: color\n  }));\n});\nPatternDots.propTypes = {\n  id: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  background: PropTypes.string.isRequired,\n  size: PropTypes.number.isRequired,\n  padding: PropTypes.number.isRequired,\n  stagger: PropTypes.bool.isRequired\n};\nPatternDots.defaultProps = {\n  color: '#000000',\n  background: '#ffffff',\n  size: 4,\n  padding: 4,\n  stagger: false\n};\n\nvar patternDotsDef = function patternDotsDef(id) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _extends({\n    id: id,\n    type: 'patternDots'\n  }, options);\n};\n\nvar TWO_PI = Math.PI * 2;\n\nvar degreesToRadians = function degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n};\n\nvar radiansToDegrees = function radiansToDegrees(radians) {\n  return 180 * radians / Math.PI;\n};\n\nvar midAngle = function midAngle(arc) {\n  return arc.startAngle + (arc.endAngle - arc.startAngle) / 2;\n};\n\nvar positionFromAngle = function positionFromAngle(angle, distance) {\n  return {\n    x: Math.cos(angle) * distance,\n    y: Math.sin(angle) * distance\n  };\n};\n/**\n * Normalize given angle (degrees) in the 0~360 range.\n *\n * @param {number} angle\n *\n * @return {number}\n */\n\n\nvar absoluteAngleDegrees = function absoluteAngleDegrees(angle) {\n  var absAngle = angle % 360;\n\n  if (absAngle < 0) {\n    absAngle += 360;\n  }\n\n  return absAngle;\n};\n\nvar absoluteAngleRadians = function absoluteAngleRadians(angle) {\n  return angle - TWO_PI * Math.floor((angle + Math.PI) / TWO_PI);\n};\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n *\n * @param {number}  ox                   - circle x origin\n * @param {number}  oy                   - circle y origin\n * @param {number}  radius               - circle radius\n * @param {number}  startAngle           - arc start angle\n * @param {number}  endAngle             - arc end angle\n * @param {boolean} [includeCenter=true] - if true, include the center\n *\n * @return {{ points: *[][], x: number, y: number, width: number, height: number }}\n */\n\n\nvar computeArcBoundingBox = function computeArcBoundingBox(ox, oy, radius, startAngle, endAngle) {\n  var includeCenter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var points = [];\n  var p0 = positionFromAngle(degreesToRadians(startAngle), radius);\n  points.push([p0.x, p0.y]);\n  var p1 = positionFromAngle(degreesToRadians(endAngle), radius);\n  points.push([p1.x, p1.y]);\n\n  for (var angle = Math.round(Math.min(startAngle, endAngle)); angle <= Math.round(Math.max(startAngle, endAngle)); angle++) {\n    if (angle % 90 === 0) {\n      var p = positionFromAngle(degreesToRadians(angle), radius);\n      points.push([p.x, p.y]);\n    }\n  }\n\n  points = points.map(function (_ref) {\n    var x = _ref[0],\n        y = _ref[1];\n    return [ox + x, oy + y];\n  });\n  if (includeCenter === true) points.push([ox, oy]);\n  var xs = points.map(function (_ref2) {\n    var x = _ref2[0];\n    return x;\n  });\n  var ys = points.map(function (_ref3) {\n    var y = _ref3[1];\n    return y;\n  });\n  var x0 = Math.min.apply(Math, xs);\n  var x1 = Math.max.apply(Math, xs);\n  var y0 = Math.min.apply(Math, ys);\n  var y1 = Math.max.apply(Math, ys);\n  return {\n    points: points,\n    x: x0,\n    y: y0,\n    width: x1 - x0,\n    height: y1 - y0\n  };\n};\n\nvar textPropsByEngine = {\n  svg: {\n    align: {\n      left: 'start',\n      center: 'middle',\n      right: 'end'\n    },\n    baseline: {\n      top: 'before-edge',\n      center: 'central',\n      bottom: 'after-edge'\n    }\n  },\n  canvas: {\n    align: {\n      left: 'left',\n      center: 'center',\n      right: 'right'\n    },\n    baseline: {\n      top: 'top',\n      center: 'middle',\n      bottom: 'bottom'\n    }\n  }\n};\n/**\n * @param {number} radius\n * @param {number} angle          angle (radians)\n * @param {number} [rotation=0]   label rotation (degrees)\n * @param {string} [engine='svg'] one of: 'svg', 'canvas'\n * @return {{ x: number, y: number, rotate: number, align: string, baseline: string }}\n */\n\nvar getPolarLabelProps = function getPolarLabelProps(radius, angle, rotation) {\n  var engine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'svg';\n  var textProps = textPropsByEngine[engine];\n\n  var _positionFromAngle = positionFromAngle(angle - Math.PI / 2, radius),\n      x = _positionFromAngle.x,\n      y = _positionFromAngle.y;\n\n  var rotate = radiansToDegrees(angle);\n  var align = textProps.align.center;\n  var baseline = textProps.baseline.bottom;\n\n  if (rotation > 0) {\n    align = textProps.align.right;\n    baseline = textProps.baseline.center;\n  } else if (rotation < 0) {\n    align = textProps.align.left;\n    baseline = textProps.baseline.center;\n  } // reverse labels after 180°\n\n\n  if (rotation !== 0 && rotate > 180) {\n    rotate -= 180;\n    align = align === textProps.align.right ? textProps.align.left : textProps.align.right;\n  }\n\n  rotate += rotation;\n  return {\n    x: x,\n    y: y,\n    rotate: rotate,\n    align: align,\n    baseline: baseline\n  };\n};\n\nvar PatternLines = pure(function (_ref) {\n  var id = _ref.id,\n      _spacing = _ref.spacing,\n      _rotation = _ref.rotation,\n      background = _ref.background,\n      color = _ref.color,\n      lineWidth = _ref.lineWidth;\n  var rotation = Math.round(_rotation) % 360;\n  var spacing = Math.abs(_spacing);\n  if (rotation > 180) rotation = rotation - 360;else if (rotation > 90) rotation = rotation - 180;else if (rotation < -180) rotation = rotation + 360;else if (rotation < -90) rotation = rotation + 180;\n  var width = spacing;\n  var height = spacing;\n  var path = void 0;\n\n  if (rotation === 0) {\n    path = '\\n                M 0 0 L ' + width + ' 0\\n                M 0 ' + height + ' L ' + width + ' ' + height + '\\n            ';\n  } else if (rotation === 90) {\n    path = '\\n                M 0 0 L 0 ' + height + '\\n                M ' + width + ' 0 L ' + width + ' ' + height + '\\n            ';\n  } else {\n    width = Math.abs(spacing / Math.sin(degreesToRadians(rotation)));\n    height = spacing / Math.sin(degreesToRadians(90 - rotation));\n\n    if (rotation > 0) {\n      path = '\\n                    M 0 ' + -height + ' L ' + width * 2 + ' ' + height + '\\n                    M ' + -width + ' ' + -height + ' L ' + width + ' ' + height + '\\n                    M ' + -width + ' 0 L ' + width + ' ' + height * 2 + '\\n                ';\n    } else {\n      path = '\\n                    M ' + -width + ' ' + height + ' L ' + width + ' ' + -height + '\\n                    M ' + -width + ' ' + height * 2 + ' L ' + width * 2 + ' ' + -height + '\\n                    M 0 ' + height * 2 + ' L ' + width * 2 + ' 0\\n                ';\n    }\n  }\n\n  return React__default.createElement('pattern', {\n    id: id,\n    width: width,\n    height: height,\n    patternUnits: 'userSpaceOnUse'\n  }, React__default.createElement('rect', {\n    width: width,\n    height: height,\n    fill: background,\n    stroke: 'rgba(255, 0, 0, 0.1)',\n    strokeWidth: 0\n  }), React__default.createElement('path', {\n    d: path,\n    strokeWidth: lineWidth,\n    stroke: color,\n    strokeLinecap: 'square'\n  }));\n});\nPatternLines.propTypes = {\n  id: PropTypes.string.isRequired,\n  spacing: PropTypes.number.isRequired,\n  rotation: PropTypes.number.isRequired,\n  background: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  lineWidth: PropTypes.number.isRequired\n};\nPatternLines.defaultProps = {\n  spacing: 5,\n  rotation: 0,\n  color: '#000000',\n  background: '#ffffff',\n  lineWidth: 2\n};\n\nvar patternLinesDef = function patternLinesDef(id) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _extends({\n    id: id,\n    type: 'patternLines'\n  }, options);\n};\n\nvar PatternSquares = pure(function (_ref) {\n  var id = _ref.id,\n      background = _ref.background,\n      color = _ref.color,\n      size = _ref.size,\n      padding = _ref.padding,\n      stagger = _ref.stagger;\n  var fullSize = size + padding;\n  var halfPadding = padding / 2;\n\n  if (stagger === true) {\n    fullSize = size * 2 + padding * 2;\n  }\n\n  return React__default.createElement('pattern', {\n    id: id,\n    width: fullSize,\n    height: fullSize,\n    patternUnits: 'userSpaceOnUse'\n  }, React__default.createElement('rect', {\n    width: fullSize,\n    height: fullSize,\n    fill: background\n  }), React__default.createElement('rect', {\n    x: halfPadding,\n    y: halfPadding,\n    width: size,\n    height: size,\n    fill: color\n  }), stagger && React__default.createElement('rect', {\n    x: padding * 1.5 + size,\n    y: padding * 1.5 + size,\n    width: size,\n    height: size,\n    fill: color\n  }));\n});\nPatternSquares.propTypes = {\n  id: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  background: PropTypes.string.isRequired,\n  size: PropTypes.number.isRequired,\n  padding: PropTypes.number.isRequired,\n  stagger: PropTypes.bool.isRequired\n};\nPatternSquares.defaultProps = {\n  color: '#000000',\n  background: '#ffffff',\n  size: 4,\n  padding: 4,\n  stagger: false\n};\n\nvar patternSquaresDef = function patternSquaresDef(id) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _extends({\n    id: id,\n    type: 'patternSquares'\n  }, options);\n};\n\nvar patternTypes = {\n  patternDots: PatternDots,\n  patternLines: PatternLines,\n  patternSquares: PatternSquares\n};\n\nvar defsMapping = _extends({}, gradientTypes, patternTypes);\n\nvar Defs = pure(function (_ref) {\n  var definitions = _ref.defs;\n  if (!definitions || definitions.length < 1) return null;\n  return React__default.createElement('defs', null, definitions.map(function (_ref2) {\n    var type = _ref2.type,\n        def = objectWithoutProperties(_ref2, ['type']);\n    if (defsMapping[type]) return React__default.createElement(defsMapping[type], _extends({\n      key: def.id\n    }, def));\n    return null;\n  }));\n});\nDefs.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.oneOf(Object.keys(defsMapping)).isRequired,\n    id: PropTypes.string.isRequired\n  }))\n};\nvar axisThemePropType = PropTypes.shape({\n  domain: PropTypes.shape({\n    line: PropTypes.shape({\n      stroke: PropTypes.string.isRequired,\n      strokeWidth: PropTypes.number.isRequired,\n      strokeDasharray: PropTypes.string\n    }).isRequired\n  }).isRequired,\n  ticks: PropTypes.shape({\n    line: PropTypes.shape({\n      stroke: PropTypes.string.isRequired,\n      strokeWidth: PropTypes.number.isRequired,\n      strokeDasharray: PropTypes.string\n    }).isRequired,\n    text: PropTypes.shape({\n      fill: PropTypes.string.isRequired,\n      fontSize: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  legend: PropTypes.shape({\n    text: PropTypes.shape({\n      fill: PropTypes.string.isRequired,\n      fontSize: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired\n});\nvar gridThemePropType = PropTypes.shape({\n  line: PropTypes.shape({\n    stroke: PropTypes.string.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    strokeDasharray: PropTypes.string\n  }).isRequired\n});\nvar legendsThemePropType = PropTypes.shape({\n  text: PropTypes.shape({\n    fill: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired\n  }).isRequired\n});\nvar labelsThemePropType = PropTypes.shape({\n  text: PropTypes.shape({\n    fill: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired\n  }).isRequired\n});\nvar dotsThemePropType = PropTypes.shape({\n  text: PropTypes.shape({\n    fill: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired\n  }).isRequired\n});\nvar themePropType = PropTypes.shape({\n  background: PropTypes.string.isRequired,\n  axis: axisThemePropType.isRequired,\n  grid: gridThemePropType.isRequired,\n  legends: legendsThemePropType.isRequired,\n  labels: labelsThemePropType.isRequired,\n  dots: dotsThemePropType.isRequired\n});\nvar defaultTextColor = '#333333';\nvar defaultFontSize = 11;\nvar defaultTheme = {\n  background: 'transparent',\n  axis: {\n    domain: {\n      line: {\n        stroke: 'transparent',\n        strokeWidth: 1\n      }\n    },\n    ticks: {\n      line: {\n        stroke: '#777',\n        strokeWidth: 1\n      },\n      text: {\n        fill: defaultTextColor,\n        fontSize: defaultFontSize\n      }\n    },\n    legend: {\n      text: {\n        fill: defaultTextColor,\n        fontSize: defaultFontSize\n      }\n    }\n  },\n  grid: {\n    line: {\n      stroke: '#ddd',\n      strokeWidth: 1\n    }\n  },\n  legends: {\n    text: {\n      fill: defaultTextColor,\n      fontSize: defaultFontSize\n    }\n  },\n  labels: {\n    text: {\n      fill: defaultTextColor,\n      fontSize: defaultFontSize\n    }\n  },\n  markers: {\n    lineColor: '#000',\n    lineStrokeWidth: 1,\n    textColor: defaultTextColor,\n    fontSize: defaultFontSize\n  },\n  dots: {\n    text: {\n      fill: defaultTextColor,\n      fontSize: defaultFontSize\n    }\n  },\n  tooltip: {\n    container: {\n      background: 'white',\n      color: 'inherit',\n      fontSize: 'inherit',\n      borderRadius: '2px',\n      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n      padding: '5px 9px'\n    },\n    basic: {\n      whiteSpace: 'pre',\n      display: 'flex',\n      alignItems: 'center'\n    },\n    table: {},\n    tableCell: {\n      padding: '3px 5px'\n    }\n  }\n};\n\nvar SvgWrapper = function SvgWrapper(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      margin = _ref.margin,\n      defs = _ref.defs,\n      children = _ref.children,\n      theme = _ref.theme;\n  return React__default.createElement('svg', {\n    xmlns: 'http://www.w3.org/2000/svg',\n    role: 'img',\n    width: width,\n    height: height\n  }, React__default.createElement(Defs, {\n    defs: defs\n  }), React__default.createElement('rect', {\n    width: width,\n    height: height,\n    fill: theme.background\n  }), React__default.createElement('g', {\n    transform: 'translate(' + margin.left + ',' + margin.top + ')'\n  }, children));\n};\n\nSvgWrapper.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.shape({\n    top: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired\n  }).isRequired,\n  defs: PropTypes.array,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  theme: themePropType.isRequired\n}; // credit to Tanner Linsey from this issue on react motion repository:\n\nvar enhancedSpring = function enhancedSpring(value, config) {\n  if (typeof value !== 'number') {\n    return {\n      value: value,\n      config: config,\n      interpolator: config && config.interpolator ? config.interpolator : d3Interpolate.interpolate\n    };\n  }\n\n  return reactMotion.spring(value, config);\n};\n\nvar SmartMotion = function (_PureComponent) {\n  inherits(SmartMotion, _PureComponent);\n\n  function SmartMotion() {\n    var _temp, _this, _ret;\n\n    classCallCheck(this, SmartMotion);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.oldValues = {}, _this.newInters = {}, _this.currentStepValues = {}, _this.stepValues = {}, _this.stepInterpolators = {}, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  SmartMotion.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        style = _props.style,\n        children = _props.children,\n        rest = objectWithoutProperties(_props, ['style', 'children']);\n    var resolvedStyle = style(enhancedSpring);\n\n    for (var key in resolvedStyle) {\n      if ( // If key is a non-numeric interpolation\n      resolvedStyle[key] && resolvedStyle[key].interpolator) {\n        // Make sure the steps start at 0\n        this.currentStepValues[key] = this.currentStepValues[key] || 0;\n\n        if ( // And the value has changed\n        typeof this.newInters[key] === 'undefined' || resolvedStyle[key].value !== this.newInters[key].value) {\n          // Save the new value\n          this.newInters[key] = resolvedStyle[key]; // Increment the stepInterValue for this key by 1\n\n          this.stepValues[key] = this.currentStepValues[key] + 1; // Set up the new interpolator\n\n          this.stepInterpolators[key] = this.newInters[key].interpolator(this.oldValues[key], this.newInters[key].value);\n        } // Return the spring with the destination stepValue and spring config\n\n\n        resolvedStyle[key] = reactMotion.spring(this.stepValues[key], this.newInters[key].config); // console.log(resolvedStyle[key])\n      }\n    }\n\n    return React__default.createElement(reactMotion.Motion, _extends({}, rest, {\n      style: resolvedStyle\n    }), function (values) {\n      var newValues = {};\n\n      for (var _key2 in values) {\n        if (_this2.stepValues[_key2]) {\n          // Save the currentStepValue\n          _this2.currentStepValues[_key2] = values[_key2]; // Figure the percentage\n\n          var percentage = _this2.currentStepValues[_key2] - _this2.stepValues[_key2] + 1; // Save the current value and replace the value in the interpolated object\n\n          _this2.oldValues[_key2] = newValues[_key2] = _this2.stepInterpolators[_key2](percentage);\n        }\n      }\n\n      return children(_extends({}, values, newValues));\n    });\n  };\n\n  return SmartMotion;\n}(React.PureComponent);\n\nSmartMotion.propTypes = {\n  children: PropTypes.func.isRequired,\n  style: PropTypes.func.isRequired\n};\n\nvar DotsItemSymbol = function DotsItemSymbol(_ref) {\n  var size = _ref.size,\n      color = _ref.color,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor;\n  return React__default.createElement('circle', {\n    r: size / 2,\n    fill: color,\n    stroke: borderColor,\n    strokeWidth: borderWidth,\n    style: {\n      pointerEvents: 'none'\n    }\n  });\n};\n\nDotsItemSymbol.propTypes = {\n  size: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.string.isRequired\n};\nvar DotsItemSymbol$1 = pure(DotsItemSymbol);\n\nvar DotsItem = function DotsItem(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      symbol = _ref.symbol,\n      size = _ref.size,\n      color = _ref.color,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      label = _ref.label,\n      labelTextAnchor = _ref.labelTextAnchor,\n      labelYOffset = _ref.labelYOffset,\n      theme = _ref.theme;\n  return React__default.createElement('g', {\n    transform: 'translate(' + x + ', ' + y + ')',\n    style: {\n      pointerEvents: 'none'\n    }\n  }, React__default.createElement(symbol, {\n    size: size,\n    color: color,\n    borderWidth: borderWidth,\n    borderColor: borderColor\n  }), label && React__default.createElement('text', {\n    textAnchor: labelTextAnchor,\n    y: labelYOffset,\n    style: theme.dots.text\n  }, label));\n};\n\nDotsItem.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.string.isRequired,\n  symbol: PropTypes.func.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  labelTextAnchor: PropTypes.oneOf(['start', 'middle', 'end']),\n  labelYOffset: PropTypes.number.isRequired,\n  theme: PropTypes.shape({\n    dots: dotsThemePropType.isRequired\n  }).isRequired\n};\nvar DotsItemDefaultProps = {\n  symbol: DotsItemSymbol$1,\n  // label\n  labelTextAnchor: 'middle',\n  labelYOffset: -12\n};\nDotsItem.defaultProps = DotsItemDefaultProps;\nvar DotsItem$1 = pure(DotsItem);\n\nvar Chip = function Chip(_ref) {\n  var size = _ref.size,\n      color = _ref.color,\n      style = _ref.style;\n  return React__default.createElement('span', {\n    style: _extends({\n      display: 'block',\n      width: size,\n      height: size,\n      background: color\n    }, style)\n  });\n};\n\nChip.propTypes = {\n  size: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired\n};\nChip.defaultProps = {\n  size: 12,\n  style: {}\n};\nvar Chip$1 = pure(Chip);\nvar chipStyle = {\n  marginRight: 7\n};\n\nvar BasicTooltip = function BasicTooltip(props) {\n  var id = props.id,\n      _value = props.value,\n      format = props.format,\n      enableChip = props.enableChip,\n      color = props.color,\n      theme = props.theme,\n      renderContent = props.renderContent;\n  var content = void 0;\n\n  if (typeof renderContent === 'function') {\n    content = renderContent();\n  } else {\n    var value = _value;\n\n    if (format !== undefined && value !== undefined) {\n      value = format(value);\n    }\n\n    content = React__default.createElement('div', {\n      style: theme.tooltip.basic\n    }, enableChip && React__default.createElement(Chip$1, {\n      color: color,\n      style: chipStyle\n    }), value !== undefined ? React__default.createElement('span', null, id, ': ', React__default.createElement('strong', null, isNaN(value) ? String(value) : value)) : id);\n  }\n\n  return React__default.createElement('div', {\n    style: theme.tooltip.container\n  }, content);\n};\n\nBasicTooltip.propTypes = {\n  id: PropTypes.node.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  enableChip: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  format: PropTypes.func,\n  renderContent: PropTypes.func,\n  theme: PropTypes.shape({\n    tooltip: PropTypes.shape({\n      container: PropTypes.object.isRequired,\n      basic: PropTypes.object.isRequired\n    }).isRequired\n  }).isRequired\n};\nBasicTooltip.defaultProps = {\n  enableChip: false\n};\nvar enhance = compose(withPropsOnChange(['format'], function (_ref) {\n  var format = _ref.format;\n  if (!format || isFunction(format)) return {\n    format: format\n  };\n  return {\n    format: d3Format.format(format)\n  };\n}), pure);\nvar BasicTooltip$1 = enhance(BasicTooltip);\nvar tableStyle = {\n  width: '100%',\n  borderCollapse: 'collapse'\n};\n\nvar TableTooltip = function TableTooltip(_ref) {\n  var title = _ref.title,\n      rows = _ref.rows,\n      theme = _ref.theme,\n      renderContent = _ref.renderContent;\n  if (!rows.length) return null;\n  var content = void 0;\n\n  if (typeof renderContent === 'function') {\n    content = renderContent();\n  } else {\n    content = React__default.createElement('div', null, title && title, React__default.createElement('table', {\n      style: _extends({}, tableStyle, theme.tooltip.table)\n    }, React__default.createElement('tbody', null, rows.map(function (row, i) {\n      return React__default.createElement('tr', {\n        key: i\n      }, row.map(function (column, j) {\n        return React__default.createElement('td', {\n          key: j,\n          style: theme.tooltip.tableCell\n        }, column);\n      }));\n    }))));\n  }\n\n  return React__default.createElement('div', {\n    style: theme.tooltip.container\n  }, content);\n};\n\nTableTooltip.propTypes = {\n  title: PropTypes.node,\n  rows: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.node)).isRequired,\n  theme: PropTypes.shape({\n    tooltip: PropTypes.shape({\n      container: PropTypes.object.isRequired,\n      table: PropTypes.object.isRequired,\n      tableCell: PropTypes.object.isRequired\n    }).isRequired\n  }).isRequired,\n  renderContent: PropTypes.func\n};\nTableTooltip.defaultProps = {};\nvar TableTooltip$1 = pure(TableTooltip);\n/**\n * Memoize both color generator & color generator result.\n */\n\nvar memoizedColorModifier = memoize(function (method, _amount) {\n  var amount = parseFloat(_amount);\n  return memoize(function (d) {\n    return d3Color.rgb(d.color)[method](amount) // eslint-disable-line no-unexpected-multiline\n    .toString();\n  }, function (d) {\n    return d.color;\n  });\n}, function (method, amount) {\n  return method + '.' + amount;\n});\n\nvar noneGenerator = function noneGenerator() {\n  return 'none';\n};\n\nvar inheritGenerator = function inheritGenerator(d) {\n  return d.color;\n};\n/**\n * @param {string|Function} instruction\n * @param {string}          [themeKey]\n * @return {Function}\n */\n\n\nvar getInheritedColorGenerator = function getInheritedColorGenerator(instruction, themeKey) {\n  if (instruction === 'none') return noneGenerator;\n  if (isFunction(instruction)) return instruction;\n\n  if (instruction === 'theme') {\n    if (!themeKey) {\n      throw new Error('Cannot use \\'theme\\' directive without providing \\'themeKey\\'');\n    }\n\n    return function (d, theme) {\n      return get(theme, themeKey);\n    };\n  }\n\n  if (instruction === 'inherit') return inheritGenerator;\n  var inheritMatches = instruction.match(/inherit:(darker|brighter)\\(([0-9.]+)\\)/);\n\n  if (inheritMatches) {\n    var method = inheritMatches[1];\n    var amount = inheritMatches[2];\n    return memoizedColorModifier(method, amount);\n  }\n\n  return function () {\n    return instruction;\n  };\n};\n/**\n * Decompose a color for use with react-motion.\n *\n * @param {string} _color\n * @param {Object} [_config]\n * @return {Object}\n */\n\n\nvar colorMotionSpring = function colorMotionSpring(_color, _config) {\n  var color = d3Color.rgb(_color);\n  if (!_config) return {\n    colorR: color.r,\n    colorG: color.g,\n    colorB: color.b\n  };\n  var config = Object.assign({}, _config, {\n    precision: 1\n  });\n  return {\n    colorR: reactMotion.spring(color.r, config),\n    colorG: reactMotion.spring(color.g, config),\n    colorB: reactMotion.spring(color.b, config)\n  };\n};\n/**\n * Re-assemble interpolated color components for easy use.\n *\n * @param {number} colorR\n * @param {number} colorG\n * @param {number} colorB\n * @return {string}\n */\n\n\nvar getInterpolatedColor = function getInterpolatedColor(_ref) {\n  var colorR = _ref.colorR,\n      colorG = _ref.colorG,\n      colorB = _ref.colorB;\n  return 'rgb(' + Math.round(Math.max(colorR, 0)) + ',' + Math.round(Math.max(colorG, 0)) + ',' + Math.round(Math.max(colorB, 0)) + ')';\n};\n\nvar quantizeColorScales = {\n  nivo: ['#d76445', '#f47560', '#e8c1a0', '#97e3d5', '#61cdbb', '#00b0a7'],\n  // Diverging\n  BrBG: last(d3ScaleChromatic.schemeBrBG),\n  PRGn: last(d3ScaleChromatic.schemePRGn),\n  PiYG: last(d3ScaleChromatic.schemePiYG),\n  PuOr: last(d3ScaleChromatic.schemePuOr),\n  RdBu: last(d3ScaleChromatic.schemeRdBu),\n  RdGy: last(d3ScaleChromatic.schemeRdGy),\n  RdYlBu: last(d3ScaleChromatic.schemeRdYlBu),\n  RdYlGn: last(d3ScaleChromatic.schemeRdYlGn),\n  spectral: last(d3ScaleChromatic.schemeSpectral),\n  // Sequential (Single Hue)\n  blues: last(d3ScaleChromatic.schemeBlues),\n  greens: last(d3ScaleChromatic.schemeGreens),\n  greys: last(d3ScaleChromatic.schemeGreys),\n  oranges: last(d3ScaleChromatic.schemeOranges),\n  purples: last(d3ScaleChromatic.schemePurples),\n  reds: last(d3ScaleChromatic.schemeReds),\n  // Sequential (Multi-Hue)\n  BuGn: last(d3ScaleChromatic.schemeBuGn),\n  BuPu: last(d3ScaleChromatic.schemeBuPu),\n  GnBu: last(d3ScaleChromatic.schemeGnBu),\n  OrRd: last(d3ScaleChromatic.schemeOrRd),\n  PuBuGn: last(d3ScaleChromatic.schemePuBuGn),\n  PuBu: last(d3ScaleChromatic.schemePuBu),\n  PuRd: last(d3ScaleChromatic.schemePuRd),\n  RdPu: last(d3ScaleChromatic.schemeRdPu),\n  YlGnBu: last(d3ScaleChromatic.schemeYlGnBu),\n  YlGn: last(d3ScaleChromatic.schemeYlGn),\n  YlOrBr: last(d3ScaleChromatic.schemeYlOrBr),\n  YlOrRd: last(d3ScaleChromatic.schemeYlOrRd)\n};\nvar quantizeColorScalesKeys = Object.keys(quantizeColorScales);\n\nvar guessQuantizeColorScale = function guessQuantizeColorScale(colors) {\n  // colors is already a valid scale\n  if (isFunction(colors)) {\n    if (!isFunction(colors.domain)) {\n      throw new Error('Provided colors should be a valid quantize scale providing a \\'domain()\\' function');\n    }\n\n    return colors;\n  }\n\n  if (quantizeColorScales[colors]) {\n    // use predefined d3 quantize color scale\n    return d3Scale.scaleQuantize().range(quantizeColorScales[colors]);\n  } // user defined colors\n\n\n  if (isArray(colors)) return d3Scale.scaleQuantize().range(colors);\n  throw new Error('Unable to guess quantize color scale from \\'' + colors + '\\',\\nmust be a function or one of:\\n\\'' + quantizeColorScalesKeys.join('\\', \\'') + '\\'');\n}; // used for ordinal color scales\n\n\nvar colorSchemes = {\n  nivo: ['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5'],\n  // categorical\n  category10: d3ScaleChromatic.schemeCategory10,\n  accent: d3ScaleChromatic.schemeAccent,\n  dark2: d3ScaleChromatic.schemeDark2,\n  paired: d3ScaleChromatic.schemePaired,\n  pastel1: d3ScaleChromatic.schemePastel1,\n  pastel2: d3ScaleChromatic.schemePastel2,\n  set1: d3ScaleChromatic.schemeSet1,\n  set2: d3ScaleChromatic.schemeSet2,\n  set3: d3ScaleChromatic.schemeSet3,\n  // diverging\n  brown_blueGreen: last(d3ScaleChromatic.schemeBrBG),\n  purpleRed_green: last(d3ScaleChromatic.schemePRGn),\n  pink_yellowGreen: last(d3ScaleChromatic.schemePiYG),\n  purple_orange: last(d3ScaleChromatic.schemePuOr),\n  red_blue: last(d3ScaleChromatic.schemeRdBu),\n  red_grey: last(d3ScaleChromatic.schemeRdGy),\n  red_yellow_blue: last(d3ScaleChromatic.schemeRdYlBu),\n  red_yellow_green: last(d3ScaleChromatic.schemeRdYlGn),\n  spectral: last(d3ScaleChromatic.schemeSpectral),\n  // sequential single hue\n  blues: last(d3ScaleChromatic.schemeBlues),\n  greens: last(d3ScaleChromatic.schemeGreens),\n  greys: last(d3ScaleChromatic.schemeGreys),\n  oranges: last(d3ScaleChromatic.schemeOranges),\n  purples: last(d3ScaleChromatic.schemePurples),\n  reds: last(d3ScaleChromatic.schemeReds),\n  // sequential multi hue\n  blue_green: last(d3ScaleChromatic.schemeBuGn),\n  blue_purple: last(d3ScaleChromatic.schemeBuPu),\n  green_blue: last(d3ScaleChromatic.schemeGnBu),\n  orange_red: last(d3ScaleChromatic.schemeOrRd),\n  purple_blue_green: last(d3ScaleChromatic.schemePuBuGn),\n  purple_blue: last(d3ScaleChromatic.schemePuBu),\n  purple_red: last(d3ScaleChromatic.schemePuRd),\n  red_purple: last(d3ScaleChromatic.schemeRdPu),\n  yellow_green_blue: last(d3ScaleChromatic.schemeYlGnBu),\n  yellow_green: last(d3ScaleChromatic.schemeYlGn),\n  yellow_orange_brown: last(d3ScaleChromatic.schemeYlOrBr),\n  yellow_orange_red: last(d3ScaleChromatic.schemeYlOrRd)\n};\nvar colorSchemeIds = ['nivo', // categorical\n'category10', 'accent', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', // diverging\n'brown_blueGreen', 'purpleRed_green', 'pink_yellowGreen', 'purple_orange', 'red_blue', 'red_grey', 'red_yellow_blue', 'red_yellow_green', 'spectral', // sequential single hue\n'blues', 'greens', 'greys', 'oranges', 'purples', 'reds', // sequential multi hue\n'blue_green', 'blue_purple', 'green_blue', 'orange_red', 'purple_blue_green', 'purple_blue', 'purple_red', 'red_purple', 'yellow_green_blue', 'yellow_green', 'yellow_orange_brown', 'yellow_orange_red']; // used for sequential color scales\n\nvar colorInterpolators = {\n  // diverging\n  brown_blueGreen: d3ScaleChromatic.interpolateBrBG,\n  purpleRed_green: d3ScaleChromatic.interpolatePRGn,\n  pink_yellowGreen: d3ScaleChromatic.interpolatePiYG,\n  purple_orange: d3ScaleChromatic.interpolatePuOr,\n  red_blue: d3ScaleChromatic.interpolateRdBu,\n  red_grey: d3ScaleChromatic.interpolateRdGy,\n  red_yellow_blue: d3ScaleChromatic.interpolateRdYlBu,\n  red_yellow_green: d3ScaleChromatic.interpolateRdYlGn,\n  spectral: d3ScaleChromatic.interpolateSpectral,\n  // sequential single hue\n  blues: d3ScaleChromatic.interpolateBlues,\n  greens: d3ScaleChromatic.interpolateGreens,\n  greys: d3ScaleChromatic.interpolateGreys,\n  oranges: d3ScaleChromatic.interpolateOranges,\n  purples: d3ScaleChromatic.interpolatePurples,\n  reds: d3ScaleChromatic.interpolateReds,\n  // sequential multi hue\n  viridis: d3ScaleChromatic.interpolateViridis,\n  inferno: d3ScaleChromatic.interpolateInferno,\n  magma: d3ScaleChromatic.interpolateMagma,\n  plasma: d3ScaleChromatic.interpolatePlasma,\n  warm: d3ScaleChromatic.interpolateWarm,\n  cool: d3ScaleChromatic.interpolateCool,\n  cubehelixDefault: d3ScaleChromatic.interpolateCubehelixDefault,\n  blue_green: d3ScaleChromatic.interpolateBuGn,\n  blue_purple: d3ScaleChromatic.interpolateBuPu,\n  green_blue: d3ScaleChromatic.interpolateGnBu,\n  orange_red: d3ScaleChromatic.interpolateOrRd,\n  purple_blue_green: d3ScaleChromatic.interpolatePuBuGn,\n  purple_blue: d3ScaleChromatic.interpolatePuBu,\n  purple_red: d3ScaleChromatic.interpolatePuRd,\n  red_purple: d3ScaleChromatic.interpolateRdPu,\n  yellow_green_blue: d3ScaleChromatic.interpolateYlGnBu,\n  yellow_green: d3ScaleChromatic.interpolateYlGn,\n  yellow_orange_brown: d3ScaleChromatic.interpolateYlOrBr,\n  yellow_orange_red: d3ScaleChromatic.interpolateYlOrRd,\n  // cyclical\n  rainbow: d3ScaleChromatic.interpolateRainbow,\n  sinebow: d3ScaleChromatic.interpolateSinebow\n};\nvar colorInterpolatorIds = [// diverging\n'brown_blueGreen', 'purpleRed_green', 'pink_yellowGreen', 'purple_orange', 'red_blue', 'red_grey', 'red_yellow_blue', 'red_yellow_green', 'spectral', // sequential single hue\n'blues', 'greens', 'greys', 'oranges', 'purples', 'reds', // sequential multi hue\n'viridis', 'inferno', 'magma', 'plasma', 'warm', 'cool', 'cubehelixDefault', 'blue_green', 'blue_purple', 'green_blue', 'orange_red', 'purple_blue_green', 'purple_blue', 'purple_red', 'red_purple', 'yellow_green_blue', 'yellow_green', 'yellow_orange_brown', 'yellow_orange_red', // cyclical\n'rainbow', 'sinebow'];\nvar ordinalColorScales = {\n  category10: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeCategory10),\n  accent: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeAccent),\n  dark2: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeDark2),\n  paired: d3Scale.scaleOrdinal(d3ScaleChromatic.schemePaired),\n  pastel1: d3Scale.scaleOrdinal(d3ScaleChromatic.schemePastel1),\n  pastel2: d3Scale.scaleOrdinal(d3ScaleChromatic.schemePastel2),\n  set1: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeSet1),\n  set2: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeSet2),\n  set3: d3Scale.scaleOrdinal(d3ScaleChromatic.schemeSet3)\n};\n\nvar nivoCategoricalColors = function nivoCategoricalColors() {\n  return d3Scale.scaleOrdinal(['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5']);\n};\n\nvar dataColor = function dataColor(d) {\n  return d.color || d.data.color;\n};\n\nvar getColorRange = function getColorRange(instruction) {\n  if (instruction === 'data') return dataColor;\n  if (instruction === 'nivo') return nivoCategoricalColors();\n  if (isFunction(instruction)) return instruction;\n  if (ordinalColorScales[instruction]) return ordinalColorScales[instruction];\n  if (isArray(instruction)) return d3Scale.scaleOrdinal(instruction);\n  return function () {\n    return instruction;\n  };\n};\n\nvar getColorScale = function getColorScale(colors, dataScale) {\n  if (isString(colors)) {\n    var scheme = colorSchemes[colors];\n\n    if (scheme !== undefined) {\n      var scale = d3Scale.scaleOrdinal(scheme);\n      scale.type = 'ordinal';\n      return scale;\n    }\n\n    if (dataScale !== undefined && colors.indexOf('seq:') === 0) {\n      var interpolator = colorInterpolators[colors.slice(4)];\n\n      if (interpolator !== undefined) {\n        var _scale = d3Scale.scaleSequential(interpolator).domain(dataScale.domain());\n\n        _scale.type = 'sequential';\n        return _scale;\n      }\n    }\n  }\n\n  if (isArray(colors)) {\n    var _scale2 = d3Scale.scaleOrdinal(colors);\n\n    _scale2.type = 'ordinal';\n    return _scale2;\n  } // just use provided value,\n  // all elements will have identical color\n\n\n  return function () {\n    return colors;\n  };\n};\n\nvar getColorsGenerator = function getColorsGenerator(colors, colorBy) {\n  // skip range, color should be bound to data\n  if (isFunction(colorBy)) return colorBy;\n  var scale = void 0;\n\n  var getColorId = function getColorId(d) {\n    return get(d, colorBy);\n  };\n\n  if (isString(colors) && colorSchemes[colors] !== undefined) {\n    scale = d3Scale.scaleOrdinal(colorSchemes[colors]);\n    scale.type = 'ordinal';\n  } else if (isArray(colors)) {\n    // user defined color range\n    scale = d3Scale.scaleOrdinal(colors);\n    scale.type = 'ordinal';\n  } else {\n    // just use provided value,\n    // all elements will have identical color\n    return function () {\n      return colors;\n    };\n  }\n\n  var colorGenerator = function colorGenerator(d) {\n    return scale(getColorId(d));\n  };\n\n  colorGenerator.type = scale.type;\n  return colorGenerator;\n};\n/**\n * This HOC watch colors related props change\n * and returns the corresponding color generator function.\n * Using it prevent from having a new ref each time\n * we pass through the component, useful for shallow comparison.\n */\n\n\nvar withColors = function withColors() {\n  var _defaultProps, _setPropTypes;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$colorsKey = _ref.colorsKey,\n      colorsKey = _ref$colorsKey === undefined ? 'colors' : _ref$colorsKey,\n      _ref$colorByKey = _ref.colorByKey,\n      colorByKey = _ref$colorByKey === undefined ? 'colorBy' : _ref$colorByKey,\n      _ref$destKey = _ref.destKey,\n      destKey = _ref$destKey === undefined ? 'getColor' : _ref$destKey,\n      _ref$defaultColors = _ref.defaultColors,\n      defaultColors = _ref$defaultColors === undefined ? 'nivo' : _ref$defaultColors,\n      _ref$defaultColorBy = _ref.defaultColorBy,\n      defaultColorBy = _ref$defaultColorBy === undefined ? 'id' : _ref$defaultColorBy;\n\n  return compose(defaultProps((_defaultProps = {}, _defaultProps[colorsKey] = defaultColors, _defaultProps[colorByKey] = defaultColorBy, _defaultProps)), setPropTypes((_setPropTypes = {}, _setPropTypes[colorsKey] = PropTypes.any.isRequired, _setPropTypes[colorByKey] = PropTypes.oneOfType([PropTypes.string, PropTypes.func]), _setPropTypes)), withPropsOnChange([colorsKey, colorByKey], function (props) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[destKey] = getColorsGenerator(props[colorsKey], props[colorByKey]), _ref2;\n  }));\n};\n\nvar quantizeColorScalePropType = PropTypes.oneOfType([PropTypes.oneOf(quantizeColorScalesKeys), PropTypes.func, PropTypes.arrayOf(PropTypes.string)]);\nvar curvePropMapping = {\n  basis: d3Shape.curveBasis,\n  basisClosed: d3Shape.curveBasisClosed,\n  basisOpen: d3Shape.curveBasisOpen,\n  bundle: d3Shape.curveBundle,\n  cardinal: d3Shape.curveCardinal,\n  cardinalClosed: d3Shape.curveCardinalClosed,\n  cardinalOpen: d3Shape.curveCardinalOpen,\n  catmullRom: d3Shape.curveCatmullRom,\n  catmullRomClosed: d3Shape.curveCatmullRomClosed,\n  catmullRomOpen: d3Shape.curveCatmullRomOpen,\n  linear: d3Shape.curveLinear,\n  linearClosed: d3Shape.curveLinearClosed,\n  monotoneX: d3Shape.curveMonotoneX,\n  monotoneY: d3Shape.curveMonotoneY,\n  natural: d3Shape.curveNatural,\n  step: d3Shape.curveStep,\n  stepAfter: d3Shape.curveStepAfter,\n  stepBefore: d3Shape.curveStepBefore\n};\nvar curvePropKeys = Object.keys(curvePropMapping);\nvar curvePropType = PropTypes.oneOf(curvePropKeys);\nvar closedCurvePropKeys = curvePropKeys.filter(function (c) {\n  return c.endsWith('Closed');\n});\nvar closedCurvePropType = PropTypes.oneOf(closedCurvePropKeys); // Safe curves to be used with d3 area shape generator\n\nvar areaCurvePropKeys = without(curvePropKeys, 'bundle', 'basisClosed', 'basisOpen', 'cardinalClosed', 'cardinalOpen', 'catmullRomClosed', 'catmullRomOpen', 'linearClosed');\nvar areaCurvePropType = PropTypes.oneOf(areaCurvePropKeys); // Safe curves to be used with d3 line shape generator\n\nvar lineCurvePropKeys = without(curvePropKeys, 'bundle', 'basisClosed', 'basisOpen', 'cardinalClosed', 'cardinalOpen', 'catmullRomClosed', 'catmullRomOpen', 'linearClosed');\nvar lineCurvePropType = PropTypes.oneOf(lineCurvePropKeys);\n/**\n * Returns curve interpolator from given identifier.\n *\n * @param {string} id - Curve interpolator identifier\n * @return {Function}\n */\n\nvar curveFromProp = function curveFromProp(id) {\n  var curveInterpolator = curvePropMapping[id];\n\n  if (!curveInterpolator) {\n    throw new TypeError('\\'' + id + '\\', is not a valid curve interpolator identifier.');\n  }\n\n  return curvePropMapping[id];\n};\n\nvar defsPropTypes = {\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  fill: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    match: PropTypes.oneOfType([PropTypes.oneOf(['*']), PropTypes.object, PropTypes.func]).isRequired\n  })).isRequired\n};\nvar stackOrderPropMapping = {\n  ascending: d3Shape.stackOrderAscending,\n  descending: d3Shape.stackOrderDescending,\n  insideOut: d3Shape.stackOrderInsideOut,\n  none: d3Shape.stackOrderNone,\n  reverse: d3Shape.stackOrderReverse\n};\nvar stackOrderPropKeys = Object.keys(stackOrderPropMapping);\nvar stackOrderPropType = PropTypes.oneOf(stackOrderPropKeys);\n\nvar stackOrderFromProp = function stackOrderFromProp(prop) {\n  return stackOrderPropMapping[prop];\n};\n\nvar stackOffsetPropMapping = {\n  expand: d3Shape.stackOffsetExpand,\n  diverging: d3Shape.stackOffsetDiverging,\n  none: d3Shape.stackOffsetNone,\n  silhouette: d3Shape.stackOffsetSilhouette,\n  wiggle: d3Shape.stackOffsetWiggle\n};\nvar stackOffsetPropKeys = Object.keys(stackOffsetPropMapping);\nvar stackOffsetPropType = PropTypes.oneOf(stackOffsetPropKeys);\n\nvar stackOffsetFromProp = function stackOffsetFromProp(prop) {\n  return stackOffsetPropMapping[prop];\n};\n\nvar treeMapTilePropMapping = {\n  binary: d3Hierarchy.treemapBinary,\n  dice: d3Hierarchy.treemapDice,\n  slice: d3Hierarchy.treemapSlice,\n  sliceDice: d3Hierarchy.treemapSliceDice,\n  squarify: d3Hierarchy.treemapSquarify,\n  resquarify: d3Hierarchy.treemapResquarify\n};\nvar treeMapTilePropKeys = Object.keys(treeMapTilePropMapping);\nvar treeMapTilePropType = PropTypes.oneOf(treeMapTilePropKeys);\n\nvar treeMapTileFromProp = function treeMapTileFromProp(prop) {\n  return treeMapTilePropMapping[prop];\n};\n\nvar scalePropType = PropTypes.shape({\n  type: PropTypes.string.isRequired,\n  domain: PropTypes.array.isRequired,\n  range: PropTypes.array.isRequired\n});\nvar marginPropType = PropTypes.shape({\n  top: PropTypes.number,\n  right: PropTypes.number,\n  bottom: PropTypes.number,\n  left: PropTypes.number\n}).isRequired;\nvar motionPropTypes = {\n  animate: PropTypes.bool.isRequired,\n  motionStiffness: PropTypes.number.isRequired,\n  motionDamping: PropTypes.number.isRequired\n};\n/**\n * This HOC transform d3 curve interpolation identifier\n * to its corresponding interpolator.\n */\n\nvar withCurve = function withCurve() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$srcKey = _ref.srcKey,\n      srcKey = _ref$srcKey === undefined ? 'curve' : _ref$srcKey,\n      _ref$destKey = _ref.destKey,\n      destKey = _ref$destKey === undefined ? 'curveInterpolator' : _ref$destKey;\n\n  return withProps(function (props) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[destKey] = curveFromProp(props[srcKey]), _ref2;\n  });\n}; // motion\n\n\nvar defaultAnimate = true;\nvar defaultMotionStiffness = 90;\nvar defaultMotionDamping = 13; // colors\n\nvar defaultCategoricalColors = nivoCategoricalColors;\nvar defaultColorRange = d3Scale.scaleOrdinal(d3ScaleChromatic.schemeSet3); // margin\n\nvar defaultMargin = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n/**\n * This HOC watch width, height & margin props change\n * and returns new width/height plus outer dimensions.\n * Using it prevent from having a new ref each time\n * we pass through the component, useful for shallow comparison.\n * It also add required propTypes & set default margin.\n */\n\nvar withDimensions = function withDimensions() {\n  return compose(defaultProps({\n    margin: defaultMargin\n  }), setPropTypes({\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: marginPropType\n  }), withPropsOnChange(function (props, nextProps) {\n    return props.width !== nextProps.width || props.height !== nextProps.height || !isEqual(props.margin, nextProps.margin);\n  }, function (props) {\n    var margin = Object.assign({}, defaultMargin, props.margin);\n    return {\n      margin: margin,\n      width: props.width - margin.left - margin.right,\n      height: props.height - margin.top - margin.bottom,\n      outerWidth: props.width,\n      outerHeight: props.height\n    };\n  }));\n};\n\nvar getLabelGenerator = function getLabelGenerator(_label, labelFormat) {\n  var getRawLabel = isFunction(_label) ? _label : function (d) {\n    return get(d, _label);\n  };\n  var formatter = void 0;\n\n  if (labelFormat) {\n    formatter = isFunction(labelFormat) ? labelFormat : d3Format.format(labelFormat);\n  }\n\n  if (formatter) return function (d) {\n    return formatter(getRawLabel(d));\n  };\n  return getRawLabel;\n};\n\nvar getAccessorFor = function getAccessorFor(directive) {\n  return isFunction(directive) ? directive : function (d) {\n    return d[directive];\n  };\n};\n\nvar getAccessorOrValue = function getAccessorOrValue(value) {\n  return isFunction(value) ? value : function () {\n    return value;\n  };\n};\n/**\n * This HOC watch hierarchical data props change\n * and returns the corresponding summed hierarchy.\n * Using it prevent from having a new ref each time\n * we pass through the component, useful for shallow comparison.\n */\n\n\nvar withHierarchy = function withHierarchy() {\n  var _defaultProps, _setPropTypes;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$srcKey = _ref.srcKey,\n      srcKey = _ref$srcKey === undefined ? 'root' : _ref$srcKey,\n      _ref$destKey = _ref.destKey,\n      destKey = _ref$destKey === undefined ? 'root' : _ref$destKey,\n      _ref$valueKey = _ref.valueKey,\n      valueKey = _ref$valueKey === undefined ? 'value' : _ref$valueKey,\n      _ref$valueDefault = _ref.valueDefault,\n      valueDefault = _ref$valueDefault === undefined ? 'value' : _ref$valueDefault;\n\n  return compose(defaultProps((_defaultProps = {}, _defaultProps[valueKey] = valueDefault, _defaultProps)), setPropTypes((_setPropTypes = {}, _setPropTypes[srcKey] = PropTypes.object.isRequired, _setPropTypes[valueKey] = PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired, _setPropTypes)), withPropsOnChange([srcKey, valueKey], function (props) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[destKey] = d3Hierarchy.hierarchy(props[srcKey]).sum(getAccessorFor(props[valueKey])), _ref2;\n  }));\n};\n\nvar withMotion = function withMotion() {\n  return compose(setPropTypes(motionPropTypes), defaultProps({\n    animate: defaultAnimate,\n    motionDamping: defaultMotionDamping,\n    motionStiffness: defaultMotionStiffness\n  }), withPropsOnChange(['motionDamping', 'motionStiffness'], function (_ref) {\n    var motionDamping = _ref.motionDamping,\n        motionStiffness = _ref.motionStiffness;\n    return {\n      boundSpring: partialRight(reactMotion.spring, {\n        damping: motionDamping,\n        stiffness: motionStiffness\n      })\n    };\n  }));\n};\n/**\n * This HOC watch theme prop change\n * and returns it deeply merged with default theme.\n * Using it prevent from having a new ref each time\n * we pass through the component, useful for shallow comparison.\n */\n\n\nvar withTheme = function withTheme() {\n  var _setPropTypes;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$srcKey = _ref.srcKey,\n      srcKey = _ref$srcKey === undefined ? 'theme' : _ref$srcKey,\n      _ref$destKey = _ref.destKey,\n      destKey = _ref$destKey === undefined ? 'theme' : _ref$destKey;\n\n  return compose(setPropTypes((_setPropTypes = {}, _setPropTypes[srcKey] = PropTypes.object, _setPropTypes)), withPropsOnChange([srcKey], function (props) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[destKey] = merge({}, defaultTheme, props[srcKey]), _ref2;\n  }));\n};\n\nvar horizontalPositions = ['top', 'bottom'];\nvar verticalPositions = ['left', 'right'];\n/**\n * @param {Object} scale\n *\n * @return {Object} centered scale\n */\n\nvar centerScale = function centerScale(scale) {\n  var bandwidth = scale.bandwidth();\n  if (bandwidth === 0) return scale;\n  var offset = bandwidth / 2;\n\n  if (scale.round()) {\n    offset = Math.round(offset);\n  }\n\n  return function (d) {\n    return scale(d) + offset;\n  };\n};\n/**\n * @param {Object} scale\n * @param {number} [tickCount]\n *\n * @return {Array.<number|string>}\n */\n\n\nvar getScaleValues = function getScaleValues(scale, tickCount) {\n  if (scale.ticks) return scale.ticks(tickCount);\n  return scale.domain();\n};\n/**\n * @typedef {Object} AxisTick\n * @param {number} x\n * @param {number} y\n * @param {number} lineX\n * @param {number} lineY\n * @param {number} textX\n * @param {number} textY\n */\n\n/**\n * @param {number}                       width\n * @param {number}                       height\n * @param {string}                       _position\n * @param {Object}                       scale\n * @param {number|Array.<string|number>} [_tickValues]\n * @param {number}                       [tickSize=5]\n * @param {number}                       [tickPadding=5]\n * @param {number}                       [tickRotation=0]\n * @parem {string}                       [engine='svg']\n *\n * @return {{ x: number, y: number, ticks: Array.<AxisTick>, textAlign: string, textBaseline: string }}\n */\n\n\nvar computeAxisTicks = function computeAxisTicks(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      _position = _ref.position,\n      scale = _ref.scale,\n      _tickValues = _ref.tickValues,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === undefined ? 5 : _ref$tickSize,\n      _ref$tickPadding = _ref.tickPadding,\n      tickPadding = _ref$tickPadding === undefined ? 5 : _ref$tickPadding,\n      _ref$tickRotation = _ref.tickRotation,\n      tickRotation = _ref$tickRotation === undefined ? 0 : _ref$tickRotation,\n      _ref$engine = _ref.engine,\n      engine = _ref$engine === undefined ? 'svg' : _ref$engine;\n  var tickValues = isArray(_tickValues) ? _tickValues : undefined;\n  var tickCount = isNumber(_tickValues) ? _tickValues : undefined;\n  var values = tickValues || getScaleValues(scale, tickCount);\n  var textProps = textPropsByEngine[engine];\n  var orient = _position;\n  var position = scale.bandwidth ? centerScale(scale) : scale;\n  var line = {\n    lineX: 0,\n    lineY: 0\n  };\n  var text = {\n    textX: 0,\n    textY: 0\n  };\n  var x = 0;\n  var y = 0;\n  var translate = void 0;\n  var textAlign = textProps.align.center;\n  var textBaseline = textProps.baseline.center;\n\n  if (horizontalPositions.includes(orient)) {\n    translate = function translate(d) {\n      return {\n        x: position(d),\n        y: 0\n      };\n    };\n\n    line.lineY = tickSize * (orient === 'bottom' ? 1 : -1);\n    text.textY = (tickSize + tickPadding) * (orient === 'bottom' ? 1 : -1);\n\n    if (orient === 'bottom') {\n      y = height;\n      textBaseline = textProps.baseline.top;\n    } else {\n      textBaseline = textProps.baseline.bottom;\n    }\n\n    if (tickRotation === 0) {\n      textAlign = textProps.align.center;\n    } else if (orient === 'bottom' && tickRotation < 0 || orient === 'top' && tickRotation > 0) {\n      textAlign = textProps.align.right;\n      textBaseline = textProps.baseline.center;\n    } else if (orient === 'bottom' && tickRotation > 0 || orient === 'top' && tickRotation < 0) {\n      textAlign = textProps.align.left;\n      textBaseline = textProps.baseline.center;\n    }\n  } else if (verticalPositions.includes(orient)) {\n    translate = function translate(d) {\n      return {\n        x: 0,\n        y: position(d)\n      };\n    };\n\n    line.lineX = tickSize * (orient === 'right' ? 1 : -1);\n    text.textX = (tickSize + tickPadding) * (orient === 'right' ? 1 : -1);\n\n    if (orient === 'right') {\n      x = width;\n      textAlign = textProps.align.left;\n    } else {\n      textAlign = textProps.align.right;\n    }\n  }\n\n  var ticks = values.map(function (value) {\n    return _extends({\n      key: value,\n      value: value\n    }, translate(value), line, text);\n  });\n  return {\n    x: x,\n    y: y,\n    ticks: ticks,\n    textAlign: textAlign,\n    textBaseline: textBaseline\n  };\n};\n/**\n * @param {number} width\n * @param {number} height\n * @param {Object} scale\n * @param {string} axis\n *\n * @return {Array.<Object>}\n */\n\n\nvar computeGridLines = function computeGridLines(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      scale = _ref2.scale,\n      axis = _ref2.axis,\n      _ref2$values = _ref2.values,\n      values = _ref2$values === undefined ? getScaleValues(scale) : _ref2$values;\n  var position = scale.bandwidth ? centerScale(scale) : scale;\n  var lines = void 0;\n\n  if (axis === 'x') {\n    lines = values.map(function (v) {\n      return {\n        key: '' + v,\n        x1: position(v),\n        x2: position(v),\n        y1: 0,\n        y2: height\n      };\n    });\n  } else if (axis === 'y') {\n    lines = values.map(function (v) {\n      return {\n        key: '' + v,\n        x1: 0,\n        x2: width,\n        y1: position(v),\n        y2: position(v)\n      };\n    });\n  }\n\n  return lines;\n};\n\nvar AxisTick = function (_Component) {\n  inherits(AxisTick, _Component);\n\n  function AxisTick() {\n    classCallCheck(this, AxisTick);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  AxisTick.prototype.render = function render() {\n    var _props = this.props,\n        _value = _props.value,\n        x = _props.x,\n        y = _props.y,\n        opacity = _props.opacity,\n        rotate = _props.rotate,\n        format = _props.format,\n        lineX = _props.lineX,\n        lineY = _props.lineY,\n        _onClick = _props.onClick,\n        textX = _props.textX,\n        textY = _props.textY,\n        textBaseline = _props.textBaseline,\n        textAnchor = _props.textAnchor,\n        theme = _props.theme;\n    var value = _value;\n\n    if (format !== undefined) {\n      value = format(value);\n    }\n\n    var gStyle = {\n      opacity: opacity\n    };\n\n    if (_onClick) {\n      gStyle['cursor'] = 'pointer';\n    }\n\n    return React__default.createElement('g', _extends({\n      transform: 'translate(' + x + ',' + y + ')'\n    }, _onClick ? {\n      onClick: function onClick(e) {\n        return _onClick(e, value);\n      }\n    } : {}, {\n      style: gStyle\n    }), React__default.createElement('line', {\n      x1: 0,\n      x2: lineX,\n      y1: 0,\n      y2: lineY,\n      style: theme.axis.ticks.line\n    }), React__default.createElement('text', {\n      alignmentBaseline: textBaseline,\n      textAnchor: textAnchor,\n      transform: 'translate(' + textX + ',' + textY + ') rotate(' + rotate + ')',\n      style: theme.axis.ticks.text\n    }, value));\n  };\n\n  return AxisTick;\n}(React.Component);\n\nAxisTick.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n  format: PropTypes.func,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  lineX: PropTypes.number.isRequired,\n  lineY: PropTypes.number.isRequired,\n  textX: PropTypes.number.isRequired,\n  textY: PropTypes.number.isRequired,\n  textBaseline: PropTypes.string.isRequired,\n  textAnchor: PropTypes.string.isRequired,\n  opacity: PropTypes.number.isRequired,\n  rotate: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  theme: PropTypes.shape({\n    axis: axisThemePropType.isRequired\n  }).isRequired\n};\nAxisTick.defaultProps = {\n  opacity: 1,\n  rotate: 0\n};\nvar axisPositions = ['top', 'right', 'bottom', 'left'];\nvar legendPositions = ['start', 'center', 'end'];\nvar axisPropType = PropTypes.shape({\n  orient: PropTypes.oneOf(axisPositions),\n  tickValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  tickSize: PropTypes.number,\n  tickPadding: PropTypes.number,\n  tickRotation: PropTypes.number,\n  format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  legend: PropTypes.node,\n  legendPosition: PropTypes.oneOf(legendPositions),\n  legendOffset: PropTypes.number\n});\n\nvar willEnter = function willEnter() {\n  return {\n    opacity: 0,\n    x: 0,\n    y: 0\n  };\n};\n\nvar willLeave = function willLeave(springConfig) {\n  return function (_ref) {\n    var _ref$style = _ref.style,\n        x = _ref$style.x,\n        y = _ref$style.y;\n    return {\n      opacity: reactMotion.spring(0, springConfig),\n      x: reactMotion.spring(x.val, springConfig),\n      y: reactMotion.spring(y.val, springConfig)\n    };\n  };\n};\n\nvar Axis = function Axis(_ref2) {\n  var scale = _ref2.scale,\n      width = _ref2.width,\n      height = _ref2.height,\n      _position = _ref2.position,\n      tickValues = _ref2.tickValues,\n      tickSize = _ref2.tickSize,\n      tickPadding = _ref2.tickPadding,\n      tickRotation = _ref2.tickRotation,\n      format = _ref2.format,\n      _legend = _ref2.legend,\n      legendPosition = _ref2.legendPosition,\n      legendOffset = _ref2.legendOffset,\n      theme = _ref2.theme,\n      animate = _ref2.animate,\n      motionStiffness = _ref2.motionStiffness,\n      motionDamping = _ref2.motionDamping,\n      onClick = _ref2.onClick;\n\n  var _computeAxisTicks = computeAxisTicks({\n    width: width,\n    height: height,\n    scale: scale,\n    position: _position,\n    tickValues: tickValues,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation\n  }),\n      x = _computeAxisTicks.x,\n      y = _computeAxisTicks.y,\n      ticks = _computeAxisTicks.ticks,\n      textAlign = _computeAxisTicks.textAlign,\n      textBaseline = _computeAxisTicks.textBaseline;\n\n  var isHorizontal = ['top', 'bottom'].includes(_position);\n  var isVertical = !isHorizontal;\n  var legend = null;\n\n  if (_legend !== undefined) {\n    var legendX = 0;\n    var legendY = 0;\n    var legendRotation = 0;\n    var textAnchor = void 0;\n\n    if (isVertical) {\n      legendRotation = -90;\n      legendX = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n        legendY = height;\n      } else if (legendPosition === 'center') {\n        textAnchor = 'middle';\n        legendY = height / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n      }\n    } else {\n      legendY = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n      } else if (legendPosition === 'center') {\n        textAnchor = 'middle';\n        legendX = width / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n        legendX = width;\n      }\n    }\n\n    legend = React__default.createElement('text', {\n      transform: 'translate(' + legendX + ', ' + legendY + ') rotate(' + legendRotation + ')',\n      textAnchor: textAnchor,\n      style: theme.axis.legend.text\n    }, _legend);\n  }\n\n  var tickElements = void 0;\n\n  if (!animate) {\n    tickElements = React__default.createElement('g', null, ticks.map(function (tick) {\n      return React__default.createElement(AxisTick, _extends({\n        key: tick.key,\n        value: tick.key,\n        format: format,\n        lineX: tick.lineX,\n        lineY: tick.lineY,\n        rotate: tickRotation,\n        textX: tick.textX,\n        textY: tick.textY,\n        textBaseline: textBaseline,\n        textAnchor: textAlign,\n        theme: theme,\n        x: tick.x,\n        y: tick.y\n      }, onClick ? {\n        onClick: onClick\n      } : {}));\n    }));\n  } else {\n    var springConfig = {\n      stiffness: motionStiffness,\n      damping: motionDamping\n    };\n    tickElements = React__default.createElement(reactMotion.TransitionMotion, {\n      willEnter: willEnter,\n      willLeave: willLeave(springConfig),\n      styles: ticks.map(function (tick) {\n        return {\n          key: '' + tick.key,\n          data: tick,\n          style: {\n            opacity: reactMotion.spring(1, springConfig),\n            x: reactMotion.spring(tick.x, springConfig),\n            y: reactMotion.spring(tick.y, springConfig)\n          }\n        };\n      })\n    }, function (interpolatedStyles) {\n      return React__default.createElement('g', null, interpolatedStyles.map(function (_ref3) {\n        var key = _ref3.key,\n            style = _ref3.style,\n            tick = _ref3.data;\n        return React__default.createElement(AxisTick, _extends({\n          key: key,\n          value: key,\n          format: format,\n          lineX: tick.lineX,\n          lineY: tick.lineY,\n          rotate: tickRotation,\n          textX: tick.textX,\n          textY: tick.textY,\n          textBaseline: textBaseline,\n          textAnchor: textAlign,\n          theme: theme\n        }, onClick ? {\n          onClick: onClick\n        } : {}, style));\n      }));\n    });\n  }\n\n  return React__default.createElement('g', {\n    transform: 'translate(' + x + ',' + y + ')'\n  }, legend, tickElements, React__default.createElement('line', {\n    style: theme.axis.domain.line,\n    x1: 0,\n    x2: isHorizontal ? width : 0,\n    y1: 0,\n    y2: isHorizontal ? 0 : height\n  }));\n};\n\nAxis.propTypes = _extends({\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  position: PropTypes.oneOf(axisPositions).isRequired,\n  scale: PropTypes.func.isRequired,\n  tickValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  tickSize: PropTypes.number.isRequired,\n  tickPadding: PropTypes.number.isRequired,\n  tickRotation: PropTypes.number.isRequired,\n  format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  legend: PropTypes.node,\n  legendPosition: PropTypes.oneOf(legendPositions).isRequired,\n  legendOffset: PropTypes.number.isRequired,\n  theme: PropTypes.shape({\n    axis: axisThemePropType.isRequired\n  }).isRequired,\n  onClick: PropTypes.func\n}, motionPropTypes);\nAxis.defaultProps = {\n  tickSize: 5,\n  tickPadding: 5,\n  tickRotation: 0,\n  legendPosition: 'end',\n  legendOffset: 0\n};\nvar enhance$1 = compose(withMotion(), withPropsOnChange(['format', 'scale'], function (_ref4) {\n  var format = _ref4.format,\n      scale = _ref4.scale;\n\n  if (!format || isFunction(format)) {\n    return {\n      format: format\n    };\n  } else if (scale.type === 'time') {\n    var f = d3TimeFormat.timeFormat(format);\n    return {\n      format: function format(d) {\n        return f(new Date(d));\n      }\n    };\n  } else {\n    return {\n      format: d3Format.format(format)\n    };\n  }\n}), pure);\nvar Axis$1 = enhance$1(Axis);\nvar horizontalPositions$1 = ['top', 'bottom'];\nvar verticalPositions$1 = ['left', 'right'];\nvar positions = [].concat(horizontalPositions$1, verticalPositions$1);\n\nvar Axes = function Axes(_ref) {\n  var xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      width = _ref.width,\n      height = _ref.height,\n      top = _ref.top,\n      right = _ref.right,\n      bottom = _ref.bottom,\n      left = _ref.left,\n      theme = _ref.theme,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  return React__default.createElement('g', null, positions.map(function (position) {\n    var axis = axes[position];\n    if (!axis) return null;\n    var scale = horizontalPositions$1.includes(position) ? xScale : yScale;\n    return React__default.createElement(Axis$1, _extends({\n      theme: theme\n    }, axis, {\n      key: position,\n      width: width,\n      height: height,\n      position: position,\n      scale: scale,\n      animate: animate,\n      motionDamping: motionDamping,\n      motionStiffness: motionStiffness\n    }));\n  }));\n};\n\nAxes.propTypes = _extends({\n  xScale: PropTypes.func.isRequired,\n  yScale: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  top: axisPropType,\n  right: axisPropType,\n  bottom: axisPropType,\n  left: axisPropType,\n  theme: PropTypes.shape({\n    axis: axisThemePropType.isRequired\n  }).isRequired\n}, motionPropTypes);\nvar Axes$1 = shouldUpdate(function (props, nextProps) {\n  return props.xScale !== nextProps.xScale || props.yScale !== nextProps.yScale || props.width !== nextProps.width || props.height !== nextProps.height || props.theme !== nextProps.theme || props.animate !== nextProps.animate || props.motionDamping !== nextProps.motionDamping || props.motionStiffness !== nextProps.motionStiffness || !isEqual(props.top, nextProps.top) || !isEqual(props.right, nextProps.right) || !isEqual(props.bottom, nextProps.bottom) || !isEqual(props.left, nextProps.left);\n})(Axes);\n\nvar GridLine = function GridLine(props) {\n  return React__default.createElement('line', props);\n};\n\nGridLine.propTypes = {\n  x1: PropTypes.number.isRequired,\n  x2: PropTypes.number.isRequired,\n  y1: PropTypes.number.isRequired,\n  y2: PropTypes.number.isRequired\n};\nGridLine.defaultProps = {\n  x1: 0,\n  x2: 0,\n  y1: 0,\n  y2: 0\n};\n\nvar GridLines = function (_Component) {\n  inherits(GridLines, _Component);\n\n  function GridLines(props) {\n    classCallCheck(this, GridLines);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.willEnter = _this.willEnter.bind(_this);\n    _this.willLeave = _this.willLeave.bind(_this);\n    return _this;\n  }\n\n  GridLines.prototype.willEnter = function willEnter(_ref) {\n    var style = _ref.style;\n    var type = this.props.type;\n    return {\n      opacity: 0,\n      x1: type === 'x' ? 0 : style.x1.val,\n      x2: type === 'x' ? 0 : style.x2.val,\n      y1: type === 'y' ? 0 : style.y1.val,\n      y2: type === 'y' ? 0 : style.y2.val\n    };\n  };\n\n  GridLines.prototype.willLeave = function willLeave(_ref2) {\n    var style = _ref2.style;\n    var _props = this.props,\n        motionStiffness = _props.motionStiffness,\n        motionDamping = _props.motionDamping;\n    var springConfig = {\n      stiffness: motionStiffness,\n      damping: motionDamping\n    };\n    return {\n      opacity: reactMotion.spring(0, springConfig),\n      x1: reactMotion.spring(style.x1.val, springConfig),\n      x2: reactMotion.spring(style.x2.val, springConfig),\n      y1: reactMotion.spring(style.y1.val, springConfig),\n      y2: reactMotion.spring(style.y2.val, springConfig)\n    };\n  };\n\n  GridLines.prototype.render = function render() {\n    var _props2 = this.props,\n        lines = _props2.lines,\n        animate = _props2.animate,\n        motionStiffness = _props2.motionStiffness,\n        motionDamping = _props2.motionDamping,\n        theme = _props2.theme;\n\n    if (!animate) {\n      return React__default.createElement('g', null, lines.map(function (line) {\n        return React__default.createElement(GridLine, _extends({\n          key: line.key\n        }, line, theme.grid.line));\n      }));\n    }\n\n    var springConfig = {\n      stiffness: motionStiffness,\n      damping: motionDamping\n    };\n    return React__default.createElement(reactMotion.TransitionMotion, {\n      willEnter: this.willEnter,\n      willLeave: this.willLeave,\n      styles: lines.map(function (line) {\n        return {\n          key: line.key,\n          style: {\n            opacity: reactMotion.spring(1, springConfig),\n            x1: reactMotion.spring(line.x1 || 0, springConfig),\n            x2: reactMotion.spring(line.x2 || 0, springConfig),\n            y1: reactMotion.spring(line.y1 || 0, springConfig),\n            y2: reactMotion.spring(line.y2 || 0, springConfig)\n          }\n        };\n      })\n    }, function (interpolatedStyles) {\n      return React__default.createElement('g', null, interpolatedStyles.map(function (interpolatedStyle) {\n        var key = interpolatedStyle.key,\n            style = interpolatedStyle.style;\n        return React__default.createElement(GridLine, _extends({\n          key: key\n        }, theme.grid.line, style));\n      }));\n    });\n  };\n\n  return GridLines;\n}(React.Component);\n\nGridLines.propTypes = {\n  type: PropTypes.oneOf(['x', 'y']).isRequired,\n  lines: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    x1: PropTypes.number,\n    x2: PropTypes.number,\n    y1: PropTypes.number,\n    y2: PropTypes.number\n  })).isRequired,\n  theme: PropTypes.object.isRequired,\n  // motion\n  animate: PropTypes.bool.isRequired,\n  motionStiffness: PropTypes.number.isRequired,\n  motionDamping: PropTypes.number.isRequired\n};\n\nvar Grid = function Grid(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      xValues = _ref.xValues,\n      yValues = _ref.yValues,\n      theme = _ref.theme,\n      animate = _ref.animate,\n      motionStiffness = _ref.motionStiffness,\n      motionDamping = _ref.motionDamping;\n  var xLines = xScale ? computeGridLines({\n    width: width,\n    height: height,\n    scale: xScale,\n    axis: 'x',\n    values: xValues\n  }) : false;\n  var yLines = yScale ? computeGridLines({\n    width: width,\n    height: height,\n    scale: yScale,\n    axis: 'y',\n    values: yValues\n  }) : false;\n  return React__default.createElement('g', null, xLines && React__default.createElement(GridLines, {\n    type: 'x',\n    lines: xLines,\n    theme: theme,\n    animate: animate,\n    motionStiffness: motionStiffness,\n    motionDamping: motionDamping\n  }), yLines && React__default.createElement(GridLines, {\n    type: 'y',\n    lines: yLines,\n    theme: theme,\n    animate: animate,\n    motionStiffness: motionStiffness,\n    motionDamping: motionDamping\n  }));\n};\n\nGrid.propTypes = _extends({\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  xScale: PropTypes.func,\n  yScale: PropTypes.func,\n  xValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  yValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  theme: PropTypes.object.isRequired\n}, motionPropTypes);\nGrid.defaultProps = {\n  // motion\n  animate: true,\n  motionStiffness: defaultMotionStiffness,\n  motionDamping: defaultMotionDamping\n};\nvar Grid$1 = pure(Grid);\n/**\n *\n * @param {string} axis\n * @param {number} width\n * @param {number} height\n * @param {string} position\n * @param {number} offsetX\n * @param {number} offsetY\n * @param {string} orientation\n * @return {{ x: number, y: number, textAnchor: string }}\n */\n\nvar computeLabel = function computeLabel(_ref) {\n  var axis = _ref.axis,\n      width = _ref.width,\n      height = _ref.height,\n      position = _ref.position,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      orientation = _ref.orientation;\n  var x = 0;\n  var y = 0;\n  var rotation = orientation === 'vertical' ? -90 : 0;\n  var textAnchor = 'start';\n\n  if (axis === 'x') {\n    switch (position) {\n      case 'top-left':\n        x = -offsetX;\n        y = offsetY;\n        textAnchor = 'end';\n        break;\n\n      case 'top':\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'top-right':\n        x = offsetX;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'right':\n        x = offsetX;\n        y = height / 2;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n\n      case 'bottom-right':\n        x = offsetX;\n        y = height - offsetY;\n        textAnchor = 'start';\n        break;\n\n      case 'bottom':\n        y = height + offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'bottom-left':\n        y = height - offsetY;\n        x = -offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'left':\n        x = -offsetX;\n        y = height / 2;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n    }\n  } else {\n    switch (position) {\n      case 'top-left':\n        x = offsetX;\n        y = -offsetY;\n        textAnchor = 'start';\n        break;\n\n      case 'top':\n        x = width / 2;\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'top-right':\n        x = width - offsetX;\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'right':\n        x = width + offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n\n      case 'bottom-right':\n        x = width - offsetX;\n        y = offsetY;\n        textAnchor = 'end';\n        break;\n\n      case 'bottom':\n        x = width / 2;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'bottom-left':\n        x = offsetX;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'left':\n        x = -offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n    }\n  }\n\n  return {\n    x: x,\n    y: y,\n    rotation: rotation,\n    textAnchor: textAnchor\n  };\n};\n\nvar CartesianMarkersItem = function CartesianMarkersItem(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      axis = _ref2.axis,\n      scale = _ref2.scale,\n      value = _ref2.value,\n      theme = _ref2.theme,\n      lineStyle = _ref2.lineStyle,\n      textStyle = _ref2.textStyle,\n      legend = _ref2.legend,\n      legendPosition = _ref2.legendPosition,\n      legendOffsetX = _ref2.legendOffsetX,\n      legendOffsetY = _ref2.legendOffsetY,\n      legendOrientation = _ref2.legendOrientation;\n  var x = 0;\n  var x2 = 0;\n  var y = 0;\n  var y2 = 0;\n\n  if (axis === 'y') {\n    y = scale(value);\n    x2 = width;\n  } else {\n    x = scale(value);\n    y2 = height;\n  }\n\n  var legendNode = null;\n\n  if (legend) {\n    var legendProps = computeLabel({\n      axis: axis,\n      width: width,\n      height: height,\n      position: legendPosition,\n      offsetX: legendOffsetX,\n      offsetY: legendOffsetY,\n      orientation: legendOrientation\n    });\n    legendNode = React__default.createElement('text', {\n      transform: 'translate(' + legendProps.x + ', ' + legendProps.y + ') rotate(' + legendProps.rotation + ')',\n      textAnchor: legendProps.textAnchor,\n      alignmentBaseline: 'central',\n      style: textStyle\n    }, legend);\n  }\n\n  return React__default.createElement('g', {\n    transform: 'translate(' + x + ', ' + y + ')'\n  }, React__default.createElement('line', {\n    x1: 0,\n    x2: x2,\n    y1: 0,\n    y2: y2,\n    stroke: theme.markers.lineColor,\n    strokeWidth: theme.markers.lineStrokeWidth,\n    style: lineStyle\n  }), legendNode);\n};\n\nCartesianMarkersItem.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  axis: PropTypes.oneOf(['x', 'y']).isRequired,\n  scale: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  lineStyle: PropTypes.object,\n  textStyle: PropTypes.object,\n  legend: PropTypes.string,\n  legendPosition: PropTypes.oneOf(['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left']),\n  legendOffsetX: PropTypes.number.isRequired,\n  legendOffsetY: PropTypes.number.isRequired,\n  legendOrientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n  theme: PropTypes.shape({\n    markers: PropTypes.shape({\n      textColor: PropTypes.string.isRequired,\n      fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n    }).isRequired\n  }).isRequired\n};\nCartesianMarkersItem.defaultProps = {\n  legendPosition: 'top-right',\n  legendOffsetX: 14,\n  legendOffsetY: 14,\n  legendOrientation: 'horizontal'\n};\nvar CartesianMarkersItem$1 = pure(CartesianMarkersItem);\n\nvar CartesianMarkers = function CartesianMarkers(_ref) {\n  var markers = _ref.markers,\n      width = _ref.width,\n      height = _ref.height,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      theme = _ref.theme;\n  if (!markers || markers.length === 0) return null;\n  return React__default.createElement('g', null, markers.map(function (marker, i) {\n    return React__default.createElement(CartesianMarkersItem$1, _extends({\n      key: i\n    }, marker, {\n      width: width,\n      height: height,\n      scale: marker.axis === 'y' ? yScale : xScale,\n      theme: theme\n    }));\n  }));\n};\n\nCartesianMarkers.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  xScale: PropTypes.func.isRequired,\n  yScale: PropTypes.func.isRequired,\n  theme: PropTypes.shape({\n    markers: PropTypes.shape({\n      lineColor: PropTypes.string.isRequired,\n      lineStrokeWidth: PropTypes.number.isRequired,\n      textColor: PropTypes.string.isRequired,\n      fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n    }).isRequired\n  }).isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    style: PropTypes.object\n  }))\n};\nvar CartesianMarkers$1 = pure(CartesianMarkers);\n/**\n * Computes distance between two points.\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {number}\n */\n\nvar getDistance = function getDistance(x1, y1, x2, y2) {\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n  deltaX *= deltaX;\n  deltaY *= deltaY;\n  return Math.sqrt(deltaX + deltaY);\n};\n/**\n * Computes angle (radians) between two points.\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {number}\n */\n\n\nvar getAngle = function getAngle(x1, y1, x2, y2) {\n  var angle = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2;\n  return angle > 0 ? angle : Math.PI * 2 + angle;\n};\n/**\n * Check if cursor is in given rectangle.\n *\n * @param {number} x\n * @param {number} y\n * @param {number} width\n * @param {number} height\n * @param {number} cursorX\n * @param {number} cursorY\n * @return {boolean}\n */\n\n\nvar isCursorInRect = function isCursorInRect(x, y, width, height, cursorX, cursorY) {\n  return x <= cursorX && cursorX <= x + width && y <= cursorY && cursorY <= y + height;\n};\n/**\n * Check if cursor is in given ring.\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} radius\n * @param {number} innerRadius\n * @param {number} cursorX\n * @param {number} cursorY\n * @return {boolean}\n */\n\n\nvar isCursorInRing = function isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY) {\n  var distance = getDistance(cursorX, cursorY, centerX, centerY);\n  return distance < radius && distance > innerRadius;\n};\n/**\n * Search for an arc being under cursor.\n *\n * @param {number}         centerX\n * @param {number}         centerY\n * @param {number}         radius\n * @param {number}         innerRadius\n * @param {Array.<Object>} arcs\n * @param {number}         cursorX\n * @param {number}         cursorY\n * @return {*}\n */\n\n\nvar getHoveredArc = function getHoveredArc(centerX, centerY, radius, innerRadius, arcs, cursorX, cursorY) {\n  if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) return null;\n  var cursorAngle = getAngle(cursorX, cursorY, centerX, centerY);\n  return arcs.find(function (_ref) {\n    var startAngle = _ref.startAngle,\n        endAngle = _ref.endAngle;\n    return cursorAngle >= startAngle && cursorAngle < endAngle;\n  });\n};\n\nvar getRelativeCursor = function getRelativeCursor(el, event) {\n  var clientX = event.clientX,\n      clientY = event.clientY;\n  var bounds = el.getBoundingClientRect();\n  return [clientX - bounds.left, clientY - bounds.top];\n};\n\nvar horizontalPositions$2 = ['top', 'bottom'];\nvar positions$1 = ['top', 'right', 'bottom', 'left'];\n\nvar renderAxisToCanvas = function renderAxisToCanvas(ctx, _ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      position = _ref.position,\n      scale = _ref.scale,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === undefined ? 5 : _ref$tickSize,\n      _ref$tickPadding = _ref.tickPadding,\n      tickPadding = _ref$tickPadding === undefined ? 5 : _ref$tickPadding,\n      _ref$tickRotation = _ref.tickRotation,\n      tickRotation = _ref$tickRotation === undefined ? 0 : _ref$tickRotation,\n      format = _ref.format,\n      theme = _ref.theme;\n\n  var _computeAxisTicks = computeAxisTicks({\n    width: width,\n    height: height,\n    position: position,\n    scale: scale,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation,\n    engine: 'canvas'\n  }),\n      x = _computeAxisTicks.x,\n      y = _computeAxisTicks.y,\n      ticks = _computeAxisTicks.ticks,\n      textAlign = _computeAxisTicks.textAlign,\n      textBaseline = _computeAxisTicks.textBaseline;\n\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.textAlign = textAlign;\n  ctx.textBaseline = textBaseline;\n  ctx.font = theme.axis.ticks.text.fontSize + 'px sans-serif';\n  ticks.forEach(function (tick) {\n    ctx.lineWidth = theme.axis.ticks.line.strokeWidth;\n    ctx.strokeStyle = theme.axis.ticks.line.stroke;\n    ctx.beginPath();\n    ctx.moveTo(tick.x, tick.y);\n    ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY);\n    ctx.stroke();\n    var value = format !== undefined ? format(tick.value) : tick.value;\n    ctx.save();\n    ctx.translate(tick.x + tick.textX, tick.y + tick.textY);\n    ctx.rotate(degreesToRadians(tickRotation));\n    ctx.fillStyle = theme.axis.ticks.text.fill;\n    ctx.fillText(value, 0, 0);\n    ctx.restore();\n  });\n  ctx.restore();\n};\n\nvar renderAxesToCanvas = function renderAxesToCanvas(ctx, _ref2) {\n  var xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      width = _ref2.width,\n      height = _ref2.height,\n      top = _ref2.top,\n      right = _ref2.right,\n      bottom = _ref2.bottom,\n      left = _ref2.left,\n      theme = _ref2.theme;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  positions$1.map(function (position) {\n    if (!axes[position]) return null;\n    var axis = axes[position];\n    var scale = horizontalPositions$2.includes(position) ? xScale : yScale;\n    renderAxisToCanvas(ctx, _extends({}, axis, {\n      width: width,\n      height: height,\n      position: position,\n      scale: scale,\n      theme: theme\n    }));\n  });\n};\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {number}                   width\n * @param {number}                   height\n * @param {number}                   scale\n * @param {('x'|'y')}                axis\n */\n\n\nvar renderGridLinesToCanvas = function renderGridLinesToCanvas(ctx, _ref3) {\n  var width = _ref3.width,\n      height = _ref3.height,\n      scale = _ref3.scale,\n      axis = _ref3.axis;\n  var lines = computeGridLines({\n    width: width,\n    height: height,\n    scale: scale,\n    axis: axis\n  });\n  lines.forEach(function (line) {\n    ctx.beginPath();\n    ctx.moveTo(line.x1, line.y1);\n    ctx.lineTo(line.x2, line.y2);\n    ctx.stroke();\n  });\n};\n\nvar gradientKeys = Object.keys(gradientTypes);\nvar patternKeys = Object.keys(patternTypes);\n/**\n * Check a node matches given def predicate.\n *\n * @param {string|Function|Object} predicate\n * @param {Object}                 node\n * @param {string}                 [dataKey] - Optional path to access node data\n * @returns {boolean}\n */\n\nvar isMatchingDef = function isMatchingDef(predicate, node, dataKey) {\n  if (predicate === '*') {\n    return true;\n  } else if (isFunction(predicate)) {\n    return predicate(node);\n  } else if (isPlainObject(predicate)) {\n    var data = dataKey ? get(node, dataKey) : node;\n    return isEqual(pick(data, Object.keys(predicate)), predicate);\n  }\n\n  return false;\n};\n/**\n * Compute SVG defs.\n *\n * @param {Array.<Object>} defs               - Base SVG defs configs\n * @param {Array.<Object>} nodes              - Data nodes to apply defs on\n * @param {Array.<Object>} rules              - Rules used to conditionally apply defs on data nodes\n * @param {string}         [dataKey]          - Path to node data, used for rule object query based predicate\n * @param {string}         [colorKey='color'] - Node color path, required when inheritance is involved\n * @param {string}         [targetKey='fill'] - Node target property to apply def ID on\n * @returns {Array}\n */\n\n\nvar bindDefs = function bindDefs(defs, nodes, rules) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      dataKey = _ref.dataKey,\n      _ref$colorKey = _ref.colorKey,\n      colorKey = _ref$colorKey === undefined ? 'color' : _ref$colorKey,\n      _ref$targetKey = _ref.targetKey,\n      targetKey = _ref$targetKey === undefined ? 'fill' : _ref$targetKey;\n\n  var boundDefs = []; // will hold generated variation ids,\n  // to avoid generating multiple identical defs\n\n  var generatedIds = {};\n\n  if (defs.length && nodes.length) {\n    // first, add base defs\n    boundDefs = [].concat(defs);\n    nodes.forEach(function (node) {\n      var _loop = function _loop(i) {\n        var _rules$i = rules[i],\n            id = _rules$i.id,\n            match = _rules$i.match;\n\n        if (isMatchingDef(match, node, dataKey)) {\n          var def = defs.find(function (_ref2) {\n            var defId = _ref2.id;\n            return defId === id;\n          });\n\n          if (def) {\n            if (patternKeys.includes(def.type)) {\n              if (def.background === 'inherit' || def.color === 'inherit') {\n                var nodeColor = get(node, colorKey);\n                var background = def.background;\n                var color = def.color;\n                var inheritedId = id;\n\n                if (def.background === 'inherit') {\n                  inheritedId = inheritedId + '.bg.' + nodeColor;\n                  background = nodeColor;\n                }\n\n                if (def.color === 'inherit') {\n                  inheritedId = inheritedId + '.fg.' + nodeColor;\n                  color = nodeColor;\n                }\n\n                set(node, targetKey, 'url(#' + inheritedId + ')');\n\n                if (!generatedIds[inheritedId]) {\n                  boundDefs.push(_extends({}, def, {\n                    id: inheritedId,\n                    background: background,\n                    color: color\n                  }));\n                  generatedIds[inheritedId] = 1;\n                }\n              } else {\n                // do not generate new def as there's no inheritance involved\n                set(node, targetKey, 'url(#' + id + ')');\n              }\n            } else if (gradientKeys.includes(def.type)) {\n              var allColors = def.colors.map(function (_ref3) {\n                var color = _ref3.color;\n                return color;\n              });\n\n              if (allColors.includes('inherit')) {\n                var _nodeColor = get(node, colorKey);\n\n                var _inheritedId = id;\n\n                var inheritedDef = _extends({}, def, {\n                  colors: def.colors.map(function (colorStop, i) {\n                    if (colorStop.color !== 'inherit') return colorStop;\n                    _inheritedId = _inheritedId + '.' + i + '.' + _nodeColor;\n                    return _extends({}, colorStop, {\n                      color: colorStop.color === 'inherit' ? _nodeColor : colorStop.color\n                    });\n                  })\n                });\n\n                inheritedDef.id = _inheritedId;\n                set(node, targetKey, 'url(#' + _inheritedId + ')');\n\n                if (!generatedIds[_inheritedId]) {\n                  boundDefs.push(inheritedDef);\n                  generatedIds[_inheritedId] = 1;\n                }\n              } else {\n                // do not generate new def as there's no inheritance involved\n                set(node, targetKey, 'url(#' + id + ')');\n              }\n            }\n          } // break loop on first match\n\n\n          return 'break';\n        }\n      };\n\n      for (var i = 0; i < rules.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === 'break') break;\n      }\n    });\n  }\n\n  return boundDefs;\n};\n\nexports.Container = Container;\nexports.ResponsiveWrapper = ResponsiveWrapper;\nexports.SvgWrapper = SvgWrapper;\nexports.SmartMotion = SmartMotion;\nexports.noop = noop;\nexports.DotsItem = DotsItem$1;\nexports.DotsItemDefaultProps = DotsItemDefaultProps;\nexports.gradientTypes = gradientTypes;\nexports.LinearGradient = LinearGradient;\nexports.linearGradientDef = linearGradientDef;\nexports.patternTypes = patternTypes;\nexports.PatternDots = PatternDots;\nexports.patternDotsDef = patternDotsDef;\nexports.PatternLines = PatternLines;\nexports.patternLinesDef = patternLinesDef;\nexports.PatternSquares = PatternSquares;\nexports.patternSquaresDef = patternSquaresDef;\nexports.defsMapping = defsMapping;\nexports.Defs = Defs;\nexports.BasicTooltip = BasicTooltip$1;\nexports.Chip = Chip$1;\nexports.TableTooltip = TableTooltip$1;\nexports.Axis = Axis$1;\nexports.Axes = Axes$1;\nexports.Grid = Grid$1;\nexports.CartesianMarkers = CartesianMarkers$1;\nexports.CartesianMarkersItem = CartesianMarkersItem$1;\nexports.withColors = withColors;\nexports.withCurve = withCurve;\nexports.withDimensions = withDimensions;\nexports.withHierarchy = withHierarchy;\nexports.withMotion = withMotion;\nexports.withTheme = withTheme;\nexports.getLabelGenerator = getLabelGenerator;\nexports.getAccessorFor = getAccessorFor;\nexports.getAccessorOrValue = getAccessorOrValue;\nexports.scalePropType = scalePropType;\nexports.marginPropType = marginPropType;\nexports.motionPropTypes = motionPropTypes;\nexports.quantizeColorScalePropType = quantizeColorScalePropType;\nexports.curvePropMapping = curvePropMapping;\nexports.curvePropKeys = curvePropKeys;\nexports.curvePropType = curvePropType;\nexports.closedCurvePropKeys = closedCurvePropKeys;\nexports.closedCurvePropType = closedCurvePropType;\nexports.areaCurvePropKeys = areaCurvePropKeys;\nexports.areaCurvePropType = areaCurvePropType;\nexports.lineCurvePropKeys = lineCurvePropKeys;\nexports.lineCurvePropType = lineCurvePropType;\nexports.curveFromProp = curveFromProp;\nexports.defsPropTypes = defsPropTypes;\nexports.stackOrderPropMapping = stackOrderPropMapping;\nexports.stackOrderPropKeys = stackOrderPropKeys;\nexports.stackOrderPropType = stackOrderPropType;\nexports.stackOrderFromProp = stackOrderFromProp;\nexports.stackOffsetPropMapping = stackOffsetPropMapping;\nexports.stackOffsetPropKeys = stackOffsetPropKeys;\nexports.stackOffsetPropType = stackOffsetPropType;\nexports.stackOffsetFromProp = stackOffsetFromProp;\nexports.treeMapTilePropMapping = treeMapTilePropMapping;\nexports.treeMapTilePropKeys = treeMapTilePropKeys;\nexports.treeMapTilePropType = treeMapTilePropType;\nexports.treeMapTileFromProp = treeMapTileFromProp;\nexports.colorSchemes = colorSchemes;\nexports.colorSchemeIds = colorSchemeIds;\nexports.colorInterpolators = colorInterpolators;\nexports.colorInterpolatorIds = colorInterpolatorIds;\nexports.nivoCategoricalColors = nivoCategoricalColors;\nexports.getColorRange = getColorRange;\nexports.getColorScale = getColorScale;\nexports.getColorsGenerator = getColorsGenerator;\nexports.getInheritedColorGenerator = getInheritedColorGenerator;\nexports.colorMotionSpring = colorMotionSpring;\nexports.getInterpolatedColor = getInterpolatedColor;\nexports.quantizeColorScales = quantizeColorScales;\nexports.quantizeColorScalesKeys = quantizeColorScalesKeys;\nexports.guessQuantizeColorScale = guessQuantizeColorScale;\nexports.TWO_PI = TWO_PI;\nexports.degreesToRadians = degreesToRadians;\nexports.radiansToDegrees = radiansToDegrees;\nexports.midAngle = midAngle;\nexports.positionFromAngle = positionFromAngle;\nexports.absoluteAngleDegrees = absoluteAngleDegrees;\nexports.absoluteAngleRadians = absoluteAngleRadians;\nexports.computeArcBoundingBox = computeArcBoundingBox;\nexports.getPolarLabelProps = getPolarLabelProps;\nexports.getRelativeCursor = getRelativeCursor;\nexports.getDistance = getDistance;\nexports.getAngle = getAngle;\nexports.isCursorInRect = isCursorInRect;\nexports.isCursorInRing = isCursorInRing;\nexports.getHoveredArc = getHoveredArc;\nexports.renderAxisToCanvas = renderAxisToCanvas;\nexports.renderAxesToCanvas = renderAxesToCanvas;\nexports.renderGridLinesToCanvas = renderGridLinesToCanvas;\nexports.isMatchingDef = isMatchingDef;\nexports.bindDefs = bindDefs;\nexports.textPropsByEngine = textPropsByEngine;\nexports.axisThemePropType = axisThemePropType;\nexports.gridThemePropType = gridThemePropType;\nexports.legendsThemePropType = legendsThemePropType;\nexports.labelsThemePropType = labelsThemePropType;\nexports.dotsThemePropType = dotsThemePropType;\nexports.themePropType = themePropType;\nexports.defaultTheme = defaultTheme;\nexports.defaultAnimate = defaultAnimate;\nexports.defaultMotionStiffness = defaultMotionStiffness;\nexports.defaultMotionDamping = defaultMotionDamping;\nexports.defaultCategoricalColors = defaultCategoricalColors;\nexports.defaultColorRange = defaultColorRange;\nexports.defaultMargin = defaultMargin;","map":null,"metadata":{},"sourceType":"script"}