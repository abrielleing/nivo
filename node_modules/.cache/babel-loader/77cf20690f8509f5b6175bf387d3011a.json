{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar d3Shape = require('d3-shape');\n\nvar setDisplayName = _interopDefault(require('recompose/setDisplayName'));\n\nvar compose = _interopDefault(require('recompose/compose'));\n\nvar pure = _interopDefault(require('recompose/pure'));\n\nvar defaultProps = _interopDefault(require('recompose/defaultProps'));\n\nvar withPropsOnChange = _interopDefault(require('recompose/withPropsOnChange'));\n\nvar core = require('@nivo/core');\n\nvar legends = require('@nivo/legends');\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar PieLayout = function (_Component) {\n  inherits(PieLayout, _Component);\n\n  function PieLayout() {\n    classCallCheck(this, PieLayout);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PieLayout.prototype.render = function render() {\n    var _props = this.props,\n        arcs = _props.arcs,\n        arcGenerator = _props.arcGenerator,\n        startAngle = _props.startAngle,\n        endAngle = _props.endAngle,\n        width = _props.width,\n        height = _props.height,\n        centerX = _props.centerX,\n        centerY = _props.centerY,\n        radius = _props.radius,\n        innerRadius = _props.innerRadius,\n        debug = _props.debug,\n        render = _props.children;\n    return render({\n      arcs: arcs,\n      arcGenerator: arcGenerator,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      width: width,\n      height: height,\n      centerX: centerX,\n      centerY: centerY,\n      radius: radius,\n      innerRadius: innerRadius,\n      debug: debug\n    });\n  };\n\n  return PieLayout;\n}(React.Component);\n\nPieLayout.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })).isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  fit: PropTypes.bool.isRequired,\n  sortByValue: PropTypes.bool.isRequired,\n  startAngle: PropTypes.number.isRequired,\n  endAngle: PropTypes.number.isRequired,\n  padAngle: PropTypes.number.isRequired,\n  arcs: PropTypes.array.isRequired,\n  // computed\n  arcGenerator: PropTypes.func.isRequired,\n  // computed\n  centerX: PropTypes.number.isRequired,\n  // computed\n  centerY: PropTypes.number.isRequired,\n  // computed\n  radius: PropTypes.number.isRequired,\n  // computed\n  innerRadius: PropTypes.number.isRequired,\n  // re-computed\n  cornerRadius: PropTypes.number.isRequired,\n  debug: PropTypes.shape({\n    points: PropTypes.array.isRequired,\n    box: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired\n    }).isRequired,\n    ratio: PropTypes.number.isRequired\n  }),\n  // computed\n  children: PropTypes.func.isRequired\n};\nvar PieLayoutDefaultProps = {\n  fit: true,\n  sortByValue: false,\n  innerRadius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  padAngle: 0,\n  cornerRadius: 0\n};\n\nvar enhance = function enhance(Component) {\n  return compose(defaultProps(PieLayoutDefaultProps), core.withColors(), withPropsOnChange(['width', 'height', 'innerRadius', 'startAngle', 'endAngle', 'fit', 'cornerRadius'], function (_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        _innerRadius = _ref.innerRadius,\n        startAngle = _ref.startAngle,\n        endAngle = _ref.endAngle,\n        fit = _ref.fit,\n        cornerRadius = _ref.cornerRadius;\n    var radius = Math.min(width, height) / 2;\n    var innerRadius = radius * Math.min(_innerRadius, 1);\n    var centerX = width / 2;\n    var centerY = height / 2;\n    var boundingBox = void 0;\n\n    if (fit === true) {\n      var _computeArcBoundingBo = core.computeArcBoundingBox(centerX, centerY, radius, startAngle - 90, endAngle - 90),\n          points = _computeArcBoundingBo.points,\n          box = objectWithoutProperties(_computeArcBoundingBo, ['points']);\n\n      var ratio = Math.min(width / box.width, height / box.height);\n      var adjustedBox = {\n        width: box.width * ratio,\n        height: box.height * ratio\n      };\n      adjustedBox.x = (width - adjustedBox.width) / 2;\n      adjustedBox.y = (height - adjustedBox.height) / 2;\n      centerX = (centerX - box.x) / box.width * box.width * ratio + adjustedBox.x;\n      centerY = (centerY - box.y) / box.height * box.height * ratio + adjustedBox.y;\n      boundingBox = {\n        box: box,\n        ratio: ratio,\n        points: points\n      };\n      radius = radius * ratio;\n      innerRadius = innerRadius * ratio;\n    }\n\n    var arcGenerator = d3Shape.arc().outerRadius(radius).innerRadius(innerRadius).cornerRadius(cornerRadius);\n    return {\n      centerX: centerX,\n      centerY: centerY,\n      radius: radius,\n      innerRadius: innerRadius,\n      arcGenerator: arcGenerator,\n      debug: boundingBox\n    };\n  }), withPropsOnChange(['sortByValue', 'padAngle', 'startAngle', 'endAngle'], function (_ref2) {\n    var sortByValue = _ref2.sortByValue,\n        padAngle = _ref2.padAngle,\n        startAngle = _ref2.startAngle,\n        endAngle = _ref2.endAngle;\n    var pie = d3Shape.pie().value(function (d) {\n      return d.value;\n    }).padAngle(core.degreesToRadians(padAngle)).startAngle(core.degreesToRadians(startAngle)).endAngle(core.degreesToRadians(endAngle));\n    if (sortByValue !== true) pie.sortValues(null);\n    return {\n      pie: pie\n    };\n  }), withPropsOnChange(['pie', 'data'], function (_ref3) {\n    var pie = _ref3.pie,\n        data = _ref3.data;\n    return {\n      arcs: pie(data).map(function (arc) {\n        var angle = Math.abs(arc.endAngle - arc.startAngle);\n        return _extends({}, arc, {\n          angle: angle,\n          angleDeg: core.radiansToDegrees(angle)\n        });\n      })\n    };\n  }), withPropsOnChange(['arcs', 'getColor'], function (_ref4) {\n    var arcs = _ref4.arcs,\n        getColor = _ref4.getColor;\n    return {\n      arcs: arcs.map(function (arc) {\n        return _extends({}, arc, {\n          color: getColor(arc.data)\n        });\n      })\n    };\n  }), pure)(Component);\n};\n\nvar PieLayout$1 = setDisplayName('PieLayout')(enhance(PieLayout));\nvar arcPropType = PropTypes.shape({\n  startAngle: PropTypes.number.isRequired,\n  endAngle: PropTypes.number.isRequired,\n  angle: PropTypes.number.isRequired,\n  angleDeg: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    value: PropTypes.number.isRequired\n  }).isRequired\n});\nvar PiePropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.number.isRequired\n  })).isRequired,\n  // layout\n  startAngle: PropTypes.number.isRequired,\n  endAngle: PropTypes.number.isRequired,\n  fit: PropTypes.bool.isRequired,\n  padAngle: PropTypes.number.isRequired,\n  sortByValue: PropTypes.bool.isRequired,\n  innerRadius: PropTypes.number.isRequired,\n  cornerRadius: PropTypes.number.isRequired,\n  // border\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // radial labels\n  enableRadialLabels: PropTypes.bool.isRequired,\n  radialLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  radialLabelsSkipAngle: PropTypes.number,\n  radialLabelsTextXOffset: PropTypes.number,\n  radialLabelsTextColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  radialLabelsLinkOffset: PropTypes.number,\n  radialLabelsLinkDiagonalLength: PropTypes.number,\n  radialLabelsLinkHorizontalLength: PropTypes.number,\n  radialLabelsLinkStrokeWidth: PropTypes.number,\n  radialLabelsLinkColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // slices labels\n  enableSlicesLabels: PropTypes.bool.isRequired,\n  sliceLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  slicesLabelsSkipAngle: PropTypes.number,\n  slicesLabelsTextColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // styling\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  fill: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    match: PropTypes.oneOfType([PropTypes.oneOf(['*']), PropTypes.object, PropTypes.func]).isRequired\n  })).isRequired,\n  //boundDefs: PropTypes.array.isRequired, // computed\n  // interactivity\n  isInteractive: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n  // tooltip\n  lockTooltip: PropTypes.bool.isRequired,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  tooltip: PropTypes.func,\n  // legends\n  legends: PropTypes.arrayOf(PropTypes.shape(legends.LegendPropShape)).isRequired\n  /*\n  legendData: PropTypes.arrayOf(\n      PropTypes.shape({\n          label: PropTypes.string.isRequired,\n          fill: PropTypes.string.isRequired,\n      })\n  ).isRequired,\n  */\n\n};\nvar PieDefaultProps = {\n  sortByValue: false,\n  innerRadius: 0,\n  padAngle: 0,\n  cornerRadius: 0,\n  // layout\n  startAngle: 0,\n  endAngle: core.radiansToDegrees(Math.PI * 2),\n  fit: true,\n  // border\n  borderWidth: 0,\n  borderColor: 'inherit:darker(1)',\n  // radial labels\n  enableRadialLabels: true,\n  radialLabel: 'id',\n  radialLabelsTextColor: 'theme',\n  radialLabelsLinkColor: 'theme',\n  // slices labels\n  enableSlicesLabels: true,\n  sliceLabel: 'value',\n  slicesLabelsTextColor: 'theme',\n  // styling\n  defs: [],\n  fill: [],\n  // interactivity\n  isInteractive: true,\n  onClick: core.noop,\n  // tooltip\n  lockTooltip: true,\n  // legends\n  legends: []\n};\n\nvar PieSlice = function PieSlice(_ref) {\n  var data = _ref.data,\n      path = _ref.path,\n      color = _ref.color,\n      fill = _ref.fill,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      showTooltip = _ref.showTooltip,\n      hideTooltip = _ref.hideTooltip,\n      onClick = _ref.onClick,\n      tooltipFormat = _ref.tooltipFormat,\n      tooltip = _ref.tooltip,\n      theme = _ref.theme;\n\n  var handleTooltip = function handleTooltip(e) {\n    return showTooltip(React__default.createElement(core.BasicTooltip, {\n      id: data.label,\n      value: data.value,\n      enableChip: true,\n      color: color,\n      theme: theme,\n      format: tooltipFormat,\n      renderContent: typeof tooltip === 'function' ? tooltip.bind(null, _extends({\n        color: color\n      }, data)) : null\n    }), e);\n  };\n\n  return React__default.createElement('path', {\n    key: data.id,\n    d: path,\n    fill: fill,\n    strokeWidth: borderWidth,\n    stroke: borderColor,\n    onMouseEnter: handleTooltip,\n    onMouseMove: handleTooltip,\n    onMouseLeave: hideTooltip,\n    onClick: onClick\n  });\n};\n\nPieSlice.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    value: PropTypes.number.isRequired\n  }).isRequired,\n  path: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  fill: PropTypes.string.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.string.isRequired,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  tooltip: PropTypes.func,\n  showTooltip: PropTypes.func.isRequired,\n  hideTooltip: PropTypes.func.isRequired,\n  onClick: PropTypes.func,\n  theme: PropTypes.shape({\n    tooltip: PropTypes.shape({}).isRequired\n  }).isRequired\n};\nvar enhance$1 = compose(withPropsOnChange(['data', 'onClick'], function (_ref2) {\n  var data = _ref2.data,\n      _onClick = _ref2.onClick;\n  return {\n    onClick: function onClick(event) {\n      return _onClick(data, event);\n    }\n  };\n}), pure);\nvar PieSlice$1 = enhance$1(PieSlice);\n\nvar computeRadialLabels = function computeRadialLabels(arcs, _ref) {\n  var getLabel = _ref.getLabel,\n      radius = _ref.radius,\n      skipAngle = _ref.skipAngle,\n      linkOffset = _ref.linkOffset,\n      linkDiagonalLength = _ref.linkDiagonalLength,\n      linkHorizontalLength = _ref.linkHorizontalLength,\n      textXOffset = _ref.textXOffset;\n  return arcs.filter(function (arc) {\n    return skipAngle === 0 || arc.angleDeg > skipAngle;\n  }).map(function (arc) {\n    var angle = core.absoluteAngleRadians(core.midAngle(arc) - Math.PI / 2);\n    var positionA = core.positionFromAngle(angle, radius + linkOffset);\n    var positionB = core.positionFromAngle(angle, radius + linkOffset + linkDiagonalLength);\n    var positionC = void 0;\n    var labelPosition = void 0;\n    var textAlign = void 0;\n\n    if (core.absoluteAngleDegrees(core.radiansToDegrees(angle)) < 90 || core.absoluteAngleDegrees(core.radiansToDegrees(angle)) >= 270) {\n      positionC = {\n        x: positionB.x + linkHorizontalLength,\n        y: positionB.y\n      };\n      labelPosition = {\n        x: positionB.x + linkHorizontalLength + textXOffset,\n        y: positionB.y\n      };\n      textAlign = 'left';\n    } else {\n      positionC = {\n        x: positionB.x - linkHorizontalLength,\n        y: positionB.y\n      };\n      labelPosition = {\n        x: positionB.x - linkHorizontalLength - textXOffset,\n        y: positionB.y\n      };\n      textAlign = 'right';\n    }\n\n    return {\n      arc: arc,\n      text: getLabel(arc.data),\n      position: labelPosition,\n      align: textAlign,\n      line: [positionA, positionB, positionC]\n    };\n  });\n};\n\nvar lineGenerator = d3Shape.line().x(function (d) {\n  return d.x;\n}).y(function (d) {\n  return d.y;\n});\n\nvar PieRadialLabels = function (_Component) {\n  inherits(PieRadialLabels, _Component);\n\n  function PieRadialLabels() {\n    classCallCheck(this, PieRadialLabels);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PieRadialLabels.prototype.render = function render() {\n    var _props = this.props,\n        arcs = _props.arcs,\n        label = _props.label,\n        radius = _props.radius,\n        skipAngle = _props.skipAngle,\n        linkOffset = _props.linkOffset,\n        linkDiagonalLength = _props.linkDiagonalLength,\n        linkHorizontalLength = _props.linkHorizontalLength,\n        linkStrokeWidth = _props.linkStrokeWidth,\n        textXOffset = _props.textXOffset,\n        textColor = _props.textColor,\n        linkColor = _props.linkColor,\n        theme = _props.theme;\n    var labels = computeRadialLabels(arcs, {\n      getLabel: label,\n      radius: radius,\n      skipAngle: skipAngle,\n      linkOffset: linkOffset,\n      linkDiagonalLength: linkDiagonalLength,\n      linkHorizontalLength: linkHorizontalLength,\n      textXOffset: textXOffset\n    });\n    return labels.map(function (label) {\n      return React__default.createElement(React.Fragment, {\n        key: label.arc.data.id\n      }, React__default.createElement('path', {\n        d: lineGenerator(label.line),\n        fill: 'none',\n        style: {\n          fill: 'none',\n          stroke: linkColor(label.arc, theme)\n        },\n        strokeWidth: linkStrokeWidth\n      }), React__default.createElement('g', {\n        transform: 'translate(' + label.position.x + ', ' + label.position.y + ')'\n      }, React__default.createElement('text', {\n        textAnchor: core.textPropsByEngine.svg.align[label.align],\n        dy: '0.3em',\n        style: _extends({}, theme.labels.text, {\n          fill: textColor(label.arc.data, theme)\n        })\n      }, label.text)));\n    });\n  };\n\n  return PieRadialLabels;\n}(React.Component);\n\nPieRadialLabels.propTypes = {\n  arcs: PropTypes.arrayOf(arcPropType).isRequired,\n  label: PropTypes.func.isRequired,\n  skipAngle: PropTypes.number.isRequired,\n  radius: PropTypes.number.isRequired,\n  linkOffset: PropTypes.number.isRequired,\n  linkDiagonalLength: PropTypes.number.isRequired,\n  linkHorizontalLength: PropTypes.number.isRequired,\n  linkStrokeWidth: PropTypes.number.isRequired,\n  textXOffset: PropTypes.number.isRequired,\n  textColor: PropTypes.func.isRequired,\n  linkColor: PropTypes.func.isRequired,\n  theme: PropTypes.shape({\n    axis: core.axisThemePropType.isRequired,\n    labels: core.labelsThemePropType.isRequired\n  }).isRequired\n};\nPieRadialLabels.defaultProps = {\n  skipAngle: 0,\n  linkOffset: 0,\n  linkDiagonalLength: 16,\n  linkHorizontalLength: 24,\n  linkStrokeWidth: 1,\n  textXOffset: 6\n};\nvar sliceStyle = {\n  pointerEvents: 'none'\n};\n\nvar PieSlicesLabels = function (_Component) {\n  inherits(PieSlicesLabels, _Component);\n\n  function PieSlicesLabels() {\n    classCallCheck(this, PieSlicesLabels);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PieSlicesLabels.prototype.render = function render() {\n    var _props = this.props,\n        arcs = _props.arcs,\n        label = _props.label,\n        radius = _props.radius,\n        skipAngle = _props.skipAngle,\n        innerRadius = _props.innerRadius,\n        textColor = _props.textColor,\n        theme = _props.theme;\n    var centerRadius = innerRadius + (radius - innerRadius) / 2;\n    return React__default.createElement(React.Fragment, null, arcs.filter(function (arc) {\n      return skipAngle === 0 || arc.angleDeg > skipAngle;\n    }).map(function (arc) {\n      var angle = core.midAngle(arc) - Math.PI / 2;\n      var position = core.positionFromAngle(angle, centerRadius);\n      return React__default.createElement('g', {\n        key: arc.data.id,\n        transform: 'translate(' + position.x + ', ' + position.y + ')',\n        style: sliceStyle\n      }, React__default.createElement('text', {\n        textAnchor: 'middle',\n        style: _extends({}, theme.labels.text, {\n          fill: textColor(arc.data, theme)\n        })\n      }, label(arc.data)));\n    }));\n  };\n\n  return PieSlicesLabels;\n}(React.Component);\n\nPieSlicesLabels.propTypes = {\n  arcs: PropTypes.arrayOf(arcPropType).isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  skipAngle: PropTypes.number.isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number.isRequired,\n  textColor: PropTypes.func.isRequired,\n  theme: PropTypes.shape({\n    labels: core.labelsThemePropType.isRequired\n  }).isRequired\n};\nPieSlicesLabels.defaultProps = {\n  skipAngle: 0\n};\n\nvar PieLegends = function (_Component) {\n  inherits(PieLegends, _Component);\n\n  function PieLegends() {\n    classCallCheck(this, PieLegends);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PieLegends.prototype.render = function render() {\n    var _props = this.props,\n        width = _props.width,\n        height = _props.height,\n        legends$$1 = _props.legends,\n        data = _props.data,\n        theme = _props.theme;\n    return legends$$1.map(function (legend, i) {\n      return React__default.createElement(legends.BoxLegendSvg, _extends({\n        key: i\n      }, legend, {\n        containerWidth: width,\n        containerHeight: height,\n        data: data,\n        theme: theme\n      }));\n    });\n  };\n\n  return PieLegends;\n}(React.Component);\n\nPieLegends.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  arcs: PropTypes.arrayOf(arcPropType).isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  legends: PropTypes.arrayOf(PropTypes.shape(legends.LegendPropShape)).isRequired,\n  theme: core.themePropType.isRequired\n};\n\nvar enhance$2 = function enhance(Component) {\n  return compose(withPropsOnChange(['arcs'], function (_ref) {\n    var arcs = _ref.arcs;\n    return {\n      data: arcs.map(function (arc) {\n        return {\n          id: arc.data.id,\n          label: arc.data.id,\n          color: arc.color,\n          fill: arc.fill\n        };\n      })\n    };\n  }), pure)(Component);\n};\n\nvar PieLegends$1 = setDisplayName('PieLegends')(enhance$2(PieLegends));\n\nvar Pie = function (_Component) {\n  inherits(Pie, _Component);\n\n  function Pie() {\n    classCallCheck(this, Pie);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _props = this.props,\n        data = _props.data,\n        sortByValue = _props.sortByValue,\n        startAngle = _props.startAngle,\n        endAngle = _props.endAngle,\n        padAngle = _props.padAngle,\n        fit = _props.fit,\n        innerRadius = _props.innerRadius,\n        cornerRadius = _props.cornerRadius,\n        margin = _props.margin,\n        width = _props.width,\n        height = _props.height,\n        outerWidth = _props.outerWidth,\n        outerHeight = _props.outerHeight,\n        colors = _props.colors,\n        colorBy = _props.colorBy,\n        borderWidth = _props.borderWidth,\n        _borderColor = _props.borderColor,\n        enableRadialLabels = _props.enableRadialLabels,\n        getRadialLabel = _props.getRadialLabel,\n        radialLabelsSkipAngle = _props.radialLabelsSkipAngle,\n        radialLabelsLinkOffset = _props.radialLabelsLinkOffset,\n        radialLabelsLinkDiagonalLength = _props.radialLabelsLinkDiagonalLength,\n        radialLabelsLinkHorizontalLength = _props.radialLabelsLinkHorizontalLength,\n        radialLabelsLinkStrokeWidth = _props.radialLabelsLinkStrokeWidth,\n        radialLabelsTextXOffset = _props.radialLabelsTextXOffset,\n        radialLabelsTextColor = _props.radialLabelsTextColor,\n        radialLabelsLinkColor = _props.radialLabelsLinkColor,\n        enableSlicesLabels = _props.enableSlicesLabels,\n        getSliceLabel = _props.getSliceLabel,\n        slicesLabelsSkipAngle = _props.slicesLabelsSkipAngle,\n        slicesLabelsTextColor = _props.slicesLabelsTextColor,\n        theme = _props.theme,\n        defs = _props.defs,\n        fill = _props.fill,\n        isInteractive = _props.isInteractive,\n        onClick = _props.onClick,\n        tooltipFormat = _props.tooltipFormat,\n        tooltip = _props.tooltip,\n        legends$$1 = _props.legends;\n    var borderColor = core.getInheritedColorGenerator(_borderColor);\n    return React__default.createElement(PieLayout$1, {\n      width: width,\n      height: height,\n      data: data,\n      sortByValue: sortByValue,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      fit: fit,\n      padAngle: padAngle,\n      innerRadius: innerRadius,\n      cornerRadius: cornerRadius,\n      colors: colors,\n      colorBy: colorBy\n    }, function (_ref) {\n      var centerX = _ref.centerX,\n          centerY = _ref.centerY,\n          radius = _ref.radius,\n          innerRadius = _ref.innerRadius,\n          arcs = _ref.arcs,\n          arcGenerator = _ref.arcGenerator;\n      var boundDefs = core.bindDefs(defs, arcs, fill, {\n        dataKey: 'data'\n      });\n      return React__default.createElement(core.Container, {\n        isInteractive: isInteractive,\n        theme: theme\n      }, function (_ref2) {\n        var showTooltip = _ref2.showTooltip,\n            hideTooltip = _ref2.hideTooltip;\n        return React__default.createElement(core.SvgWrapper, {\n          width: outerWidth,\n          height: outerHeight,\n          margin: margin,\n          defs: boundDefs,\n          theme: theme\n        }, React__default.createElement('g', {\n          transform: 'translate(' + centerX + ',' + centerY + ')'\n        }, arcs.map(function (arc) {\n          return React__default.createElement(PieSlice$1, {\n            key: arc.data.id,\n            data: arc.data,\n            path: arcGenerator(arc),\n            color: arc.color,\n            fill: arc.fill ? arc.fill : arc.color,\n            borderWidth: borderWidth,\n            borderColor: borderColor(arc),\n            showTooltip: showTooltip,\n            hideTooltip: hideTooltip,\n            tooltipFormat: tooltipFormat,\n            tooltip: tooltip,\n            onClick: onClick,\n            theme: theme\n          });\n        }), enableRadialLabels && React__default.createElement(PieRadialLabels, {\n          arcs: arcs,\n          radius: radius,\n          label: getRadialLabel,\n          skipAngle: radialLabelsSkipAngle,\n          linkOffset: radialLabelsLinkOffset,\n          linkDiagonalLength: radialLabelsLinkDiagonalLength,\n          linkHorizontalLength: radialLabelsLinkHorizontalLength,\n          linkStrokeWidth: radialLabelsLinkStrokeWidth,\n          textXOffset: radialLabelsTextXOffset,\n          textColor: core.getInheritedColorGenerator(radialLabelsTextColor, 'labels.text.fill'),\n          linkColor: core.getInheritedColorGenerator(radialLabelsLinkColor, 'axis.ticks.line.stroke'),\n          theme: theme\n        }), enableSlicesLabels && React__default.createElement(PieSlicesLabels, {\n          arcs: arcs,\n          radius: radius,\n          innerRadius: innerRadius,\n          theme: theme,\n          label: getSliceLabel,\n          skipAngle: slicesLabelsSkipAngle,\n          textColor: core.getInheritedColorGenerator(slicesLabelsTextColor, 'labels.text.fill')\n        })), React__default.createElement(PieLegends$1, {\n          width: width,\n          height: height,\n          arcs: arcs,\n          legends: legends$$1,\n          theme: theme\n        }));\n      });\n    });\n  };\n\n  return Pie;\n}(React.Component);\n\nPie.propTypes = PiePropTypes;\n\nvar enhance$3 = function enhance$$1(Component) {\n  return compose(defaultProps(PieDefaultProps), core.withTheme(), core.withDimensions(), withPropsOnChange(['radialLabel'], function (_ref3) {\n    var radialLabel = _ref3.radialLabel;\n    return {\n      getRadialLabel: core.getLabelGenerator(radialLabel)\n    };\n  }), withPropsOnChange(['sliceLabel'], function (_ref4) {\n    var sliceLabel = _ref4.sliceLabel;\n    return {\n      getSliceLabel: core.getLabelGenerator(sliceLabel)\n    };\n  }), pure)(Component);\n};\n\nvar Pie$1 = setDisplayName('Pie')(enhance$3(Pie));\n\nvar ResponsivePie = function ResponsivePie(props) {\n  return React__default.createElement(core.ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React__default.createElement(Pie$1, _extends({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nvar enhance$4 = function enhance$4(Component) {\n  return compose(defaultProps(PieDefaultProps), core.withTheme(), core.withDimensions(), pure)(Component);\n};\n\nvar drawSliceLabels = function drawSliceLabels(ctx, arcs, _ref) {\n  var arcGenerator = _ref.arcGenerator,\n      getLabel = _ref.getLabel,\n      skipAngle = _ref.skipAngle,\n      getTextColor = _ref.getTextColor,\n      theme = _ref.theme;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.font = theme.labels.text.fontSize + 'px sans-serif';\n  arcs.filter(function (arc) {\n    return skipAngle === 0 || arc.angleDeg > skipAngle;\n  }).forEach(function (arc) {\n    var _arcGenerator$centroi = arcGenerator.centroid(arc),\n        centroidX = _arcGenerator$centroi[0],\n        centroidY = _arcGenerator$centroi[1];\n\n    var sliceLabel = getLabel(arc.data);\n    var textColor = getTextColor(arc, theme);\n    ctx.save();\n    ctx.translate(centroidX, centroidY);\n    ctx.fillStyle = textColor;\n    ctx.fillText(sliceLabel, 0, 0);\n    ctx.restore();\n  });\n};\n\nvar drawRadialLabels = function drawRadialLabels(ctx, arcs, _ref2) {\n  var radius = _ref2.radius,\n      getLabel = _ref2.getLabel,\n      skipAngle = _ref2.skipAngle,\n      linkOffset = _ref2.linkOffset,\n      linkDiagonalLength = _ref2.linkDiagonalLength,\n      linkHorizontalLength = _ref2.linkHorizontalLength,\n      linkStrokeWidth = _ref2.linkStrokeWidth,\n      textXOffset = _ref2.textXOffset,\n      getTextColor = _ref2.getTextColor,\n      getLinkColor = _ref2.getLinkColor,\n      theme = _ref2.theme;\n  var radialLabels = computeRadialLabels(arcs, {\n    getLabel: getLabel,\n    radius: radius,\n    skipAngle: skipAngle,\n    linkOffset: linkOffset,\n    linkDiagonalLength: linkDiagonalLength,\n    linkHorizontalLength: linkHorizontalLength,\n    textXOffset: textXOffset\n  });\n  ctx.textBaseline = 'middle';\n  ctx.font = theme.labels.text.fontSize + 'px sans-serif';\n  radialLabels.forEach(function (label) {\n    var dataWithColor = _extends({}, label.arc.data, {\n      color: label.arc.color\n    });\n\n    ctx.save();\n    ctx.translate(label.position.x, label.position.y);\n    ctx.fillStyle = getTextColor(dataWithColor, theme);\n    ctx.textAlign = core.textPropsByEngine.canvas.align[label.align];\n    ctx.fillText(label.text, 0, 0);\n    ctx.restore();\n    ctx.beginPath();\n    ctx.strokeStyle = getLinkColor(dataWithColor, theme);\n    ctx.lineWidth = linkStrokeWidth;\n    label.line.forEach(function (point, index) {\n      if (index === 0) ctx.moveTo(point.x, point.y);else ctx.lineTo(point.x, point.y);\n    });\n    if (linkStrokeWidth > 0) ctx.stroke();\n  });\n};\n\nvar PieTooltip = function PieTooltip(_ref) {\n  var data = _ref.data,\n      color = _ref.color,\n      tooltipFormat = _ref.tooltipFormat,\n      tooltip = _ref.tooltip,\n      theme = _ref.theme;\n  return React__default.createElement(core.BasicTooltip, {\n    id: data.label,\n    value: data.value,\n    enableChip: true,\n    color: color,\n    theme: theme,\n    format: tooltipFormat,\n    renderContent: typeof tooltip === 'function' ? tooltip.bind(null, _extends({\n      color: color\n    }, data)) : null\n  });\n};\n\nPieTooltip.propTypes = {\n  data: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    value: PropTypes.number.isRequired\n  }).isRequired,\n  color: PropTypes.string.isRequired,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  tooltip: PropTypes.func,\n  theme: PropTypes.shape({\n    tooltip: PropTypes.shape({}).isRequired\n  }).isRequired\n};\nvar PieTooltip$1 = pure(PieTooltip);\n\nvar PieCanvasRenderer = function (_Component) {\n  inherits(PieCanvasRenderer, _Component);\n\n  function PieCanvasRenderer() {\n    var _temp, _this, _ret;\n\n    classCallCheck(this, PieCanvasRenderer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getArcFromMouse = function (event) {\n      var _getRelativeCursor = core.getRelativeCursor(_this.surface, event),\n          x = _getRelativeCursor[0],\n          y = _getRelativeCursor[1];\n\n      var _this$props = _this.props,\n          centerX = _this$props.centerX,\n          centerY = _this$props.centerY,\n          margin = _this$props.margin,\n          radius = _this$props.radius,\n          innerRadius = _this$props.innerRadius,\n          arcs = _this$props.arcs;\n      return core.getHoveredArc(margin.left + centerX, margin.top + centerY, radius, innerRadius, arcs, x, y);\n    }, _this.handleMouseHover = function (showTooltip, hideTooltip) {\n      return function (event) {\n        if (_this.props.isInteractive !== true) return;\n\n        var arc = _this.getArcFromMouse(event);\n\n        if (arc) {\n          showTooltip(React__default.createElement(PieTooltip$1, {\n            data: arc.data,\n            color: arc.color,\n            theme: _this.props.theme\n          }), event);\n        } else {\n          hideTooltip();\n        }\n      };\n    }, _this.handleMouseLeave = function (hideTooltip) {\n      return function () {\n        if (_this.props.isInteractive !== true) return;\n        hideTooltip();\n      };\n    }, _this.handleClick = function (event) {\n      var arc = _this.getArcFromMouse(event);\n\n      if (arc) _this.props.onClick(arc.data, event);\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  PieCanvasRenderer.prototype.componentDidMount = function componentDidMount() {\n    this.ctx = this.surface.getContext('2d');\n    this.draw(this.props);\n  };\n\n  PieCanvasRenderer.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {\n    // only update if the DOM needs to be updated\n    if (this.props.outerWidth !== props.outerWidth || this.props.outerHeight !== props.outerHeight || this.props.isInteractive !== props.isInteractive || this.props.theme !== props.theme) {\n      return true;\n    }\n\n    this.draw(props);\n    return false;\n  };\n\n  PieCanvasRenderer.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.ctx = this.surface.getContext('2d');\n    this.draw(this.props);\n  };\n\n  PieCanvasRenderer.prototype.draw = function draw(props) {\n    var _this2 = this;\n\n    var arcs = props.arcs,\n        arcGenerator = props.arcGenerator,\n        width = props.width,\n        height = props.height,\n        centerX = props.centerX,\n        centerY = props.centerY,\n        radius = props.radius,\n        outerWidth = props.outerWidth,\n        outerHeight = props.outerHeight,\n        pixelRatio = props.pixelRatio,\n        margin = props.margin,\n        borderWidth = props.borderWidth,\n        borderColor = props.borderColor,\n        enableSlicesLabels = props.enableSlicesLabels,\n        enableRadialLabels = props.enableRadialLabels,\n        legends$$1 = props.legends,\n        theme = props.theme;\n    this.surface.width = outerWidth * pixelRatio;\n    this.surface.height = outerHeight * pixelRatio;\n    this.ctx.scale(pixelRatio, pixelRatio);\n    this.ctx.fillStyle = theme.background;\n    this.ctx.fillRect(0, 0, outerWidth, outerHeight);\n    this.ctx.save();\n    this.ctx.translate(margin.left, margin.top);\n    arcGenerator.context(this.ctx);\n    this.ctx.save();\n    this.ctx.translate(centerX, centerY);\n    var getBorderColor = core.getInheritedColorGenerator(borderColor);\n    arcs.forEach(function (arc) {\n      _this2.ctx.beginPath();\n\n      _this2.ctx.fillStyle = arc.color;\n      _this2.ctx.strokeStyle = getBorderColor(_extends({}, arc.data, {\n        color: arc.color\n      }));\n      _this2.ctx.lineWidth = borderWidth;\n      arcGenerator(arc);\n\n      _this2.ctx.fill();\n\n      if (borderWidth > 0) _this2.ctx.stroke();\n    });\n\n    if (enableSlicesLabels === true) {\n      var sliceLabel = props.sliceLabel,\n          slicesLabelsSkipAngle = props.slicesLabelsSkipAngle,\n          slicesLabelsTextColor = props.slicesLabelsTextColor;\n      drawSliceLabels(this.ctx, arcs, {\n        arcGenerator: arcGenerator,\n        skipAngle: slicesLabelsSkipAngle,\n        getLabel: core.getLabelGenerator(sliceLabel),\n        getTextColor: core.getInheritedColorGenerator(slicesLabelsTextColor, 'labels.text.fill'),\n        theme: theme\n      });\n    }\n\n    if (enableRadialLabels === true) {\n      var radialLabel = props.radialLabel,\n          radialLabelsSkipAngle = props.radialLabelsSkipAngle,\n          radialLabelsLinkOffset = props.radialLabelsLinkOffset,\n          radialLabelsLinkStrokeWidth = props.radialLabelsLinkStrokeWidth,\n          radialLabelsLinkDiagonalLength = props.radialLabelsLinkDiagonalLength,\n          radialLabelsLinkHorizontalLength = props.radialLabelsLinkHorizontalLength,\n          radialLabelsTextXOffset = props.radialLabelsTextXOffset,\n          radialLabelsTextColor = props.radialLabelsTextColor,\n          radialLabelsLinkColor = props.radialLabelsLinkColor;\n      drawRadialLabels(this.ctx, arcs, {\n        radius: radius,\n        getLabel: core.getLabelGenerator(radialLabel),\n        skipAngle: radialLabelsSkipAngle,\n        linkOffset: radialLabelsLinkOffset,\n        linkDiagonalLength: radialLabelsLinkDiagonalLength,\n        linkHorizontalLength: radialLabelsLinkHorizontalLength,\n        linkStrokeWidth: radialLabelsLinkStrokeWidth,\n        textXOffset: radialLabelsTextXOffset,\n        getTextColor: core.getInheritedColorGenerator(radialLabelsTextColor, 'labels.text.fill'),\n        getLinkColor: core.getInheritedColorGenerator(radialLabelsLinkColor, 'axis.ticks.line.stroke'),\n        theme: theme\n      });\n    }\n\n    this.ctx.restore();\n    legends$$1.forEach(function (legend) {\n      legends.renderLegendToCanvas(_this2.ctx, _extends({}, legend, {\n        data: arcs.map(function (arc) {\n          return {\n            id: arc.data.id,\n            label: arc.data.id,\n            color: arc.color\n          };\n        }),\n        containerWidth: width,\n        containerHeight: height\n      }));\n    });\n  };\n\n  PieCanvasRenderer.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        outerWidth = _props.outerWidth,\n        outerHeight = _props.outerHeight,\n        pixelRatio = _props.pixelRatio,\n        isInteractive = _props.isInteractive,\n        theme = _props.theme;\n    return React__default.createElement(core.Container, {\n      isInteractive: isInteractive,\n      theme: theme\n    }, function (_ref) {\n      var showTooltip = _ref.showTooltip,\n          hideTooltip = _ref.hideTooltip;\n      return React__default.createElement('canvas', {\n        ref: function ref(surface) {\n          _this3.surface = surface;\n        },\n        width: outerWidth * pixelRatio,\n        height: outerHeight * pixelRatio,\n        style: {\n          width: outerWidth,\n          height: outerHeight\n        },\n        onMouseEnter: _this3.handleMouseHover(showTooltip, hideTooltip),\n        onMouseMove: _this3.handleMouseHover(showTooltip, hideTooltip),\n        onMouseLeave: _this3.handleMouseLeave(hideTooltip),\n        onClick: _this3.handleClick\n      });\n    });\n  };\n\n  return PieCanvasRenderer;\n}(React.Component);\n\nPieCanvasRenderer.propTypes = {\n  arcs: PropTypes.arrayOf(arcPropType).isRequired,\n  arcGenerator: PropTypes.func.isRequired,\n  // resolution\n  pixelRatio: PropTypes.number.isRequired,\n  // dimensions/layout\n  outerWidth: PropTypes.number.isRequired,\n  outerHeight: PropTypes.number.isRequired,\n  centerX: PropTypes.number.isRequired,\n  centerY: PropTypes.number.isRequired,\n  margin: PropTypes.object.isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number.isRequired,\n  // interactivity\n  isInteractive: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  // theming\n  theme: PropTypes.object.isRequired\n};\n\nvar PieCanvas = function (_Component) {\n  inherits(PieCanvas, _Component);\n\n  function PieCanvas() {\n    classCallCheck(this, PieCanvas);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PieCanvas.prototype.render = function render() {\n    var _props = this.props,\n        data = _props.data,\n        sortByValue = _props.sortByValue,\n        startAngle = _props.startAngle,\n        endAngle = _props.endAngle,\n        fit = _props.fit,\n        padAngle = _props.padAngle,\n        innerRadius = _props.innerRadius,\n        cornerRadius = _props.cornerRadius,\n        width = _props.width,\n        height = _props.height,\n        colors = _props.colors,\n        colorBy = _props.colorBy,\n        topProps = objectWithoutProperties(_props, ['data', 'sortByValue', 'startAngle', 'endAngle', 'fit', 'padAngle', 'innerRadius', 'cornerRadius', 'width', 'height', 'colors', 'colorBy']);\n    return React__default.createElement(PieLayout$1, {\n      width: width,\n      height: height,\n      data: data,\n      sortByValue: sortByValue,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      fit: fit,\n      padAngle: padAngle,\n      innerRadius: innerRadius,\n      cornerRadius: cornerRadius,\n      colors: colors,\n      colorBy: colorBy\n    }, function (props) {\n      return React__default.createElement(PieCanvasRenderer, _extends({}, topProps, props));\n    });\n  };\n\n  return PieCanvas;\n}(React.Component);\n\nPieCanvas.propTypes = PiePropTypes;\nvar PieCanvas$1 = setDisplayName('PieCanvas')(enhance$4(PieCanvas));\n\nvar ResponsivePieCanvas = function ResponsivePieCanvas(props) {\n  return React__default.createElement(core.ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React__default.createElement(PieCanvas$1, _extends({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexports.PieLayout = PieLayout$1;\nexports.Pie = Pie$1;\nexports.ResponsivePie = ResponsivePie;\nexports.PieCanvas = PieCanvas$1;\nexports.ResponsivePieCanvas = ResponsivePieCanvas;\nexports.arcPropType = arcPropType;\nexports.PiePropTypes = PiePropTypes;\nexports.PieDefaultProps = PieDefaultProps;","map":null,"metadata":{},"sourceType":"script"}